# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robocup_msgs/NavigationAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import robocup_msgs.msg

class NavigationAction(genpy.Message):
  _md5sum = "25cf7e64f157b8110b004ebe02d7640e"
  _type = "robocup_msgs/NavigationAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Action action_base
string orientation
string destinationKey
geometry_msgs/Pose coord
int64 waitTime
================================================================================
MSG: robocup_msgs/Action
int64 expectedDuration
string actionType
string status
int64 id
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['action_base','orientation','destinationKey','coord','waitTime']
  _slot_types = ['robocup_msgs/Action','string','string','geometry_msgs/Pose','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_base,orientation,destinationKey,coord,waitTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavigationAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_base is None:
        self.action_base = robocup_msgs.msg.Action()
      if self.orientation is None:
        self.orientation = ''
      if self.destinationKey is None:
        self.destinationKey = ''
      if self.coord is None:
        self.coord = geometry_msgs.msg.Pose()
      if self.waitTime is None:
        self.waitTime = 0
    else:
      self.action_base = robocup_msgs.msg.Action()
      self.orientation = ''
      self.destinationKey = ''
      self.coord = geometry_msgs.msg.Pose()
      self.waitTime = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.action_base.expectedDuration
      buff.write(_get_struct_q().pack(_x))
      _x = self.action_base.actionType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_base.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_base.id
      buff.write(_get_struct_q().pack(_x))
      _x = self.orientation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.destinationKey
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dq().pack(_x.coord.position.x, _x.coord.position.y, _x.coord.position.z, _x.coord.orientation.x, _x.coord.orientation.y, _x.coord.orientation.z, _x.coord.orientation.w, _x.waitTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_base is None:
        self.action_base = robocup_msgs.msg.Action()
      if self.coord is None:
        self.coord = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 8
      (self.action_base.expectedDuration,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_base.actionType = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_base.actionType = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_base.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_base.status = str[start:end]
      start = end
      end += 8
      (self.action_base.id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.orientation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.orientation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.destinationKey = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.destinationKey = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.coord.position.x, _x.coord.position.y, _x.coord.position.z, _x.coord.orientation.x, _x.coord.orientation.y, _x.coord.orientation.z, _x.coord.orientation.w, _x.waitTime,) = _get_struct_7dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.action_base.expectedDuration
      buff.write(_get_struct_q().pack(_x))
      _x = self.action_base.actionType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_base.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_base.id
      buff.write(_get_struct_q().pack(_x))
      _x = self.orientation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.destinationKey
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dq().pack(_x.coord.position.x, _x.coord.position.y, _x.coord.position.z, _x.coord.orientation.x, _x.coord.orientation.y, _x.coord.orientation.z, _x.coord.orientation.w, _x.waitTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_base is None:
        self.action_base = robocup_msgs.msg.Action()
      if self.coord is None:
        self.coord = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 8
      (self.action_base.expectedDuration,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_base.actionType = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_base.actionType = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_base.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_base.status = str[start:end]
      start = end
      end += 8
      (self.action_base.id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.orientation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.orientation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.destinationKey = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.destinationKey = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.coord.position.x, _x.coord.position.y, _x.coord.position.z, _x.coord.orientation.x, _x.coord.orientation.y, _x.coord.orientation.z, _x.coord.orientation.w, _x.waitTime,) = _get_struct_7dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7dq = None
def _get_struct_7dq():
    global _struct_7dq
    if _struct_7dq is None:
        _struct_7dq = struct.Struct("<7dq")
    return _struct_7dq
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
