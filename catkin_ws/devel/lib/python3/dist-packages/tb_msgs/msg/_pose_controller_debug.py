# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/pose_controller_debug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class pose_controller_debug(genpy.Message):
  _md5sum = "045e579d8d07347ca60699ee052e6d60"
  _type = "tb_msgs/pose_controller_debug"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float64 current_x
float64 current_y
float64 current_yaw
float64 goal_x
float64 goal_y
float64 goal_yaw
float64 yaw_goalFrame
float64 direct_goalFrame
float64 e_d
float64 e_dir2goal
float64 e_yaw_poseFrame
float64 dir2goal_term
float64 yaw_term
float64 linear_vel
float64 angular_vel
float64 delta_x_goalFrame
float64 delta_y_goalFrame

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','current_x','current_y','current_yaw','goal_x','goal_y','goal_yaw','yaw_goalFrame','direct_goalFrame','e_d','e_dir2goal','e_yaw_poseFrame','dir2goal_term','yaw_term','linear_vel','angular_vel','delta_x_goalFrame','delta_y_goalFrame']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,current_x,current_y,current_yaw,goal_x,goal_y,goal_yaw,yaw_goalFrame,direct_goalFrame,e_d,e_dir2goal,e_yaw_poseFrame,dir2goal_term,yaw_term,linear_vel,angular_vel,delta_x_goalFrame,delta_y_goalFrame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pose_controller_debug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.current_x is None:
        self.current_x = 0.
      if self.current_y is None:
        self.current_y = 0.
      if self.current_yaw is None:
        self.current_yaw = 0.
      if self.goal_x is None:
        self.goal_x = 0.
      if self.goal_y is None:
        self.goal_y = 0.
      if self.goal_yaw is None:
        self.goal_yaw = 0.
      if self.yaw_goalFrame is None:
        self.yaw_goalFrame = 0.
      if self.direct_goalFrame is None:
        self.direct_goalFrame = 0.
      if self.e_d is None:
        self.e_d = 0.
      if self.e_dir2goal is None:
        self.e_dir2goal = 0.
      if self.e_yaw_poseFrame is None:
        self.e_yaw_poseFrame = 0.
      if self.dir2goal_term is None:
        self.dir2goal_term = 0.
      if self.yaw_term is None:
        self.yaw_term = 0.
      if self.linear_vel is None:
        self.linear_vel = 0.
      if self.angular_vel is None:
        self.angular_vel = 0.
      if self.delta_x_goalFrame is None:
        self.delta_x_goalFrame = 0.
      if self.delta_y_goalFrame is None:
        self.delta_y_goalFrame = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.current_x = 0.
      self.current_y = 0.
      self.current_yaw = 0.
      self.goal_x = 0.
      self.goal_y = 0.
      self.goal_yaw = 0.
      self.yaw_goalFrame = 0.
      self.direct_goalFrame = 0.
      self.e_d = 0.
      self.e_dir2goal = 0.
      self.e_yaw_poseFrame = 0.
      self.dir2goal_term = 0.
      self.yaw_term = 0.
      self.linear_vel = 0.
      self.angular_vel = 0.
      self.delta_x_goalFrame = 0.
      self.delta_y_goalFrame = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17d().pack(_x.current_x, _x.current_y, _x.current_yaw, _x.goal_x, _x.goal_y, _x.goal_yaw, _x.yaw_goalFrame, _x.direct_goalFrame, _x.e_d, _x.e_dir2goal, _x.e_yaw_poseFrame, _x.dir2goal_term, _x.yaw_term, _x.linear_vel, _x.angular_vel, _x.delta_x_goalFrame, _x.delta_y_goalFrame))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.current_x, _x.current_y, _x.current_yaw, _x.goal_x, _x.goal_y, _x.goal_yaw, _x.yaw_goalFrame, _x.direct_goalFrame, _x.e_d, _x.e_dir2goal, _x.e_yaw_poseFrame, _x.dir2goal_term, _x.yaw_term, _x.linear_vel, _x.angular_vel, _x.delta_x_goalFrame, _x.delta_y_goalFrame,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17d().pack(_x.current_x, _x.current_y, _x.current_yaw, _x.goal_x, _x.goal_y, _x.goal_yaw, _x.yaw_goalFrame, _x.direct_goalFrame, _x.e_d, _x.e_dir2goal, _x.e_yaw_poseFrame, _x.dir2goal_term, _x.yaw_term, _x.linear_vel, _x.angular_vel, _x.delta_x_goalFrame, _x.delta_y_goalFrame))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.current_x, _x.current_y, _x.current_yaw, _x.goal_x, _x.goal_y, _x.goal_yaw, _x.yaw_goalFrame, _x.direct_goalFrame, _x.e_d, _x.e_dir2goal, _x.e_yaw_poseFrame, _x.dir2goal_term, _x.yaw_term, _x.linear_vel, _x.angular_vel, _x.delta_x_goalFrame, _x.delta_y_goalFrame,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
