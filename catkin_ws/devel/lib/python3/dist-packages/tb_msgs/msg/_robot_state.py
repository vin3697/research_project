# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/robot_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class robot_state(genpy.Message):
  _md5sum = "c08d840bd7be0b6d8515162731602842"
  _type = "tb_msgs/robot_state"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
#From IMU
float64 accel_linear_xB
float64 accel_linear_yB
float64 accel_linear_zB
float64 accel_amplitude
#From IMU and wheel encoder
float64 velo_linear_xB_m_wheelLeft_gyroZ
float64 velo_linear_xB_m_wheelRight_gyroZ

#Frome wheel encoder only
float64 velo_linear_xB_m_wheel
float64 velo_angular_zB_m_wheel
float64 wheel_left_velo_rad
float64 wheel_right_velo_rad

#Best result
float64 vel_xM
float64 vel_yM
float64 vel_zM

float64 pos_xM
float64 pos_yM
float64 pos_zM

float64 roll
float64 pitch
float64 yaw


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','accel_linear_xB','accel_linear_yB','accel_linear_zB','accel_amplitude','velo_linear_xB_m_wheelLeft_gyroZ','velo_linear_xB_m_wheelRight_gyroZ','velo_linear_xB_m_wheel','velo_angular_zB_m_wheel','wheel_left_velo_rad','wheel_right_velo_rad','vel_xM','vel_yM','vel_zM','pos_xM','pos_yM','pos_zM','roll','pitch','yaw']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,accel_linear_xB,accel_linear_yB,accel_linear_zB,accel_amplitude,velo_linear_xB_m_wheelLeft_gyroZ,velo_linear_xB_m_wheelRight_gyroZ,velo_linear_xB_m_wheel,velo_angular_zB_m_wheel,wheel_left_velo_rad,wheel_right_velo_rad,vel_xM,vel_yM,vel_zM,pos_xM,pos_yM,pos_zM,roll,pitch,yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.accel_linear_xB is None:
        self.accel_linear_xB = 0.
      if self.accel_linear_yB is None:
        self.accel_linear_yB = 0.
      if self.accel_linear_zB is None:
        self.accel_linear_zB = 0.
      if self.accel_amplitude is None:
        self.accel_amplitude = 0.
      if self.velo_linear_xB_m_wheelLeft_gyroZ is None:
        self.velo_linear_xB_m_wheelLeft_gyroZ = 0.
      if self.velo_linear_xB_m_wheelRight_gyroZ is None:
        self.velo_linear_xB_m_wheelRight_gyroZ = 0.
      if self.velo_linear_xB_m_wheel is None:
        self.velo_linear_xB_m_wheel = 0.
      if self.velo_angular_zB_m_wheel is None:
        self.velo_angular_zB_m_wheel = 0.
      if self.wheel_left_velo_rad is None:
        self.wheel_left_velo_rad = 0.
      if self.wheel_right_velo_rad is None:
        self.wheel_right_velo_rad = 0.
      if self.vel_xM is None:
        self.vel_xM = 0.
      if self.vel_yM is None:
        self.vel_yM = 0.
      if self.vel_zM is None:
        self.vel_zM = 0.
      if self.pos_xM is None:
        self.pos_xM = 0.
      if self.pos_yM is None:
        self.pos_yM = 0.
      if self.pos_zM is None:
        self.pos_zM = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.accel_linear_xB = 0.
      self.accel_linear_yB = 0.
      self.accel_linear_zB = 0.
      self.accel_amplitude = 0.
      self.velo_linear_xB_m_wheelLeft_gyroZ = 0.
      self.velo_linear_xB_m_wheelRight_gyroZ = 0.
      self.velo_linear_xB_m_wheel = 0.
      self.velo_angular_zB_m_wheel = 0.
      self.wheel_left_velo_rad = 0.
      self.wheel_right_velo_rad = 0.
      self.vel_xM = 0.
      self.vel_yM = 0.
      self.vel_zM = 0.
      self.pos_xM = 0.
      self.pos_yM = 0.
      self.pos_zM = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_19d().pack(_x.accel_linear_xB, _x.accel_linear_yB, _x.accel_linear_zB, _x.accel_amplitude, _x.velo_linear_xB_m_wheelLeft_gyroZ, _x.velo_linear_xB_m_wheelRight_gyroZ, _x.velo_linear_xB_m_wheel, _x.velo_angular_zB_m_wheel, _x.wheel_left_velo_rad, _x.wheel_right_velo_rad, _x.vel_xM, _x.vel_yM, _x.vel_zM, _x.pos_xM, _x.pos_yM, _x.pos_zM, _x.roll, _x.pitch, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.accel_linear_xB, _x.accel_linear_yB, _x.accel_linear_zB, _x.accel_amplitude, _x.velo_linear_xB_m_wheelLeft_gyroZ, _x.velo_linear_xB_m_wheelRight_gyroZ, _x.velo_linear_xB_m_wheel, _x.velo_angular_zB_m_wheel, _x.wheel_left_velo_rad, _x.wheel_right_velo_rad, _x.vel_xM, _x.vel_yM, _x.vel_zM, _x.pos_xM, _x.pos_yM, _x.pos_zM, _x.roll, _x.pitch, _x.yaw,) = _get_struct_19d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_19d().pack(_x.accel_linear_xB, _x.accel_linear_yB, _x.accel_linear_zB, _x.accel_amplitude, _x.velo_linear_xB_m_wheelLeft_gyroZ, _x.velo_linear_xB_m_wheelRight_gyroZ, _x.velo_linear_xB_m_wheel, _x.velo_angular_zB_m_wheel, _x.wheel_left_velo_rad, _x.wheel_right_velo_rad, _x.vel_xM, _x.vel_yM, _x.vel_zM, _x.pos_xM, _x.pos_yM, _x.pos_zM, _x.roll, _x.pitch, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.accel_linear_xB, _x.accel_linear_yB, _x.accel_linear_zB, _x.accel_amplitude, _x.velo_linear_xB_m_wheelLeft_gyroZ, _x.velo_linear_xB_m_wheelRight_gyroZ, _x.velo_linear_xB_m_wheel, _x.velo_angular_zB_m_wheel, _x.wheel_left_velo_rad, _x.wheel_right_velo_rad, _x.vel_xM, _x.vel_yM, _x.vel_zM, _x.pos_xM, _x.pos_yM, _x.pos_zM, _x.roll, _x.pitch, _x.yaw,) = _get_struct_19d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19d = None
def _get_struct_19d():
    global _struct_19d
    if _struct_19d is None:
        _struct_19d = struct.Struct("<19d")
    return _struct_19d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
