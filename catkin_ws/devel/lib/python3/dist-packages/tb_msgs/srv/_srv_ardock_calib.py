# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_ardock_calibRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_ardock_calibRequest(genpy.Message):
  _md5sum = "e885f057cb61bab34e285d392096e9db"
  _type = "tb_msgs/srv_ardock_calibRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#goal request definition
bool enable_ardock_calib
bool is_save_result
float64 timeout #timeout in second
int32 min_marker_detected #
"""
  __slots__ = ['enable_ardock_calib','is_save_result','timeout','min_marker_detected']
  _slot_types = ['bool','bool','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable_ardock_calib,is_save_result,timeout,min_marker_detected

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_ardock_calibRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable_ardock_calib is None:
        self.enable_ardock_calib = False
      if self.is_save_result is None:
        self.is_save_result = False
      if self.timeout is None:
        self.timeout = 0.
      if self.min_marker_detected is None:
        self.min_marker_detected = 0
    else:
      self.enable_ardock_calib = False
      self.is_save_result = False
      self.timeout = 0.
      self.min_marker_detected = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bdi().pack(_x.enable_ardock_calib, _x.is_save_result, _x.timeout, _x.min_marker_detected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.enable_ardock_calib, _x.is_save_result, _x.timeout, _x.min_marker_detected,) = _get_struct_2Bdi().unpack(str[start:end])
      self.enable_ardock_calib = bool(self.enable_ardock_calib)
      self.is_save_result = bool(self.is_save_result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bdi().pack(_x.enable_ardock_calib, _x.is_save_result, _x.timeout, _x.min_marker_detected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.enable_ardock_calib, _x.is_save_result, _x.timeout, _x.min_marker_detected,) = _get_struct_2Bdi().unpack(str[start:end])
      self.enable_ardock_calib = bool(self.enable_ardock_calib)
      self.is_save_result = bool(self.is_save_result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bdi = None
def _get_struct_2Bdi():
    global _struct_2Bdi
    if _struct_2Bdi is None:
        _struct_2Bdi = struct.Struct("<2Bdi")
    return _struct_2Bdi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_ardock_calibResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_ardock_calibResponse(genpy.Message):
  _md5sum = "aa1203c6682a183148673c6415c22ffe"
  _type = "tb_msgs/srv_ardock_calibResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response
bool success
int32 state_code

"""
  __slots__ = ['success','state_code']
  _slot_types = ['bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,state_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_ardock_calibResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.state_code is None:
        self.state_code = 0
    else:
      self.success = False
      self.state_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.state_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.state_code,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.state_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.state_code,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
class srv_ardock_calib(object):
  _type          = 'tb_msgs/srv_ardock_calib'
  _md5sum = 'b97a9f8d3d1c86973dd6c609bcce509a'
  _request_class  = srv_ardock_calibRequest
  _response_class = srv_ardock_calibResponse
