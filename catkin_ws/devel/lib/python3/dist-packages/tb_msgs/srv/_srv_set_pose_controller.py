# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_set_pose_controllerRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_set_pose_controllerRequest(genpy.Message):
  _md5sum = "909585fd60d79bf877986533ab091cc7"
  _type = "tb_msgs/srv_set_pose_controllerRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#goal request definition
bool enable_kyaw #0.0 -> 5.0
bool enable_kd #
bool enable_linear #0.0 -> 0.5
bool enable_angular #0.0 -> 1.5

float64 k_d
float64 k_yaw_small_angle
float64 max_linear_vel
float64 max_angular_vel
"""
  __slots__ = ['enable_kyaw','enable_kd','enable_linear','enable_angular','k_d','k_yaw_small_angle','max_linear_vel','max_angular_vel']
  _slot_types = ['bool','bool','bool','bool','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable_kyaw,enable_kd,enable_linear,enable_angular,k_d,k_yaw_small_angle,max_linear_vel,max_angular_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_set_pose_controllerRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable_kyaw is None:
        self.enable_kyaw = False
      if self.enable_kd is None:
        self.enable_kd = False
      if self.enable_linear is None:
        self.enable_linear = False
      if self.enable_angular is None:
        self.enable_angular = False
      if self.k_d is None:
        self.k_d = 0.
      if self.k_yaw_small_angle is None:
        self.k_yaw_small_angle = 0.
      if self.max_linear_vel is None:
        self.max_linear_vel = 0.
      if self.max_angular_vel is None:
        self.max_angular_vel = 0.
    else:
      self.enable_kyaw = False
      self.enable_kd = False
      self.enable_linear = False
      self.enable_angular = False
      self.k_d = 0.
      self.k_yaw_small_angle = 0.
      self.max_linear_vel = 0.
      self.max_angular_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B4d().pack(_x.enable_kyaw, _x.enable_kd, _x.enable_linear, _x.enable_angular, _x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.enable_kyaw, _x.enable_kd, _x.enable_linear, _x.enable_angular, _x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel,) = _get_struct_4B4d().unpack(str[start:end])
      self.enable_kyaw = bool(self.enable_kyaw)
      self.enable_kd = bool(self.enable_kd)
      self.enable_linear = bool(self.enable_linear)
      self.enable_angular = bool(self.enable_angular)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B4d().pack(_x.enable_kyaw, _x.enable_kd, _x.enable_linear, _x.enable_angular, _x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.enable_kyaw, _x.enable_kd, _x.enable_linear, _x.enable_angular, _x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel,) = _get_struct_4B4d().unpack(str[start:end])
      self.enable_kyaw = bool(self.enable_kyaw)
      self.enable_kd = bool(self.enable_kd)
      self.enable_linear = bool(self.enable_linear)
      self.enable_angular = bool(self.enable_angular)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B4d = None
def _get_struct_4B4d():
    global _struct_4B4d
    if _struct_4B4d is None:
        _struct_4B4d = struct.Struct("<4B4d")
    return _struct_4B4d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_set_pose_controllerResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_set_pose_controllerResponse(genpy.Message):
  _md5sum = "ea5b86e9a85cfe2316fddf1472c66e5f"
  _type = "tb_msgs/srv_set_pose_controllerResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response
float64 k_d
float64 k_yaw_small_angle
float64 max_linear_vel
float64 max_angular_vel

"""
  __slots__ = ['k_d','k_yaw_small_angle','max_linear_vel','max_angular_vel']
  _slot_types = ['float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       k_d,k_yaw_small_angle,max_linear_vel,max_angular_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_set_pose_controllerResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.k_d is None:
        self.k_d = 0.
      if self.k_yaw_small_angle is None:
        self.k_yaw_small_angle = 0.
      if self.max_linear_vel is None:
        self.max_linear_vel = 0.
      if self.max_angular_vel is None:
        self.max_angular_vel = 0.
    else:
      self.k_d = 0.
      self.k_yaw_small_angle = 0.
      self.max_linear_vel = 0.
      self.max_angular_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.k_d, _x.k_yaw_small_angle, _x.max_linear_vel, _x.max_angular_vel,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
class srv_set_pose_controller(object):
  _type          = 'tb_msgs/srv_set_pose_controller'
  _md5sum = 'a7ecf8b74de4bfe7d43b400f40a2efe5'
  _request_class  = srv_set_pose_controllerRequest
  _response_class = srv_set_pose_controllerResponse
