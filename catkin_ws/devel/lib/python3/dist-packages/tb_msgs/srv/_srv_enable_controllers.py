# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_enable_controllersRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_enable_controllersRequest(genpy.Message):
  _md5sum = "e20cb99203a04387a5b153211042f1e2"
  _type = "tb_msgs/srv_enable_controllersRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool enable_controller
bool pid_velocity_motor_left
bool pid_velocity_motor_right
"""
  __slots__ = ['enable_controller','pid_velocity_motor_left','pid_velocity_motor_right']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable_controller,pid_velocity_motor_left,pid_velocity_motor_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_enable_controllersRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable_controller is None:
        self.enable_controller = False
      if self.pid_velocity_motor_left is None:
        self.pid_velocity_motor_left = False
      if self.pid_velocity_motor_right is None:
        self.pid_velocity_motor_right = False
    else:
      self.enable_controller = False
      self.pid_velocity_motor_left = False
      self.pid_velocity_motor_right = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right,) = _get_struct_3B().unpack(str[start:end])
      self.enable_controller = bool(self.enable_controller)
      self.pid_velocity_motor_left = bool(self.pid_velocity_motor_left)
      self.pid_velocity_motor_right = bool(self.pid_velocity_motor_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right,) = _get_struct_3B().unpack(str[start:end])
      self.enable_controller = bool(self.enable_controller)
      self.pid_velocity_motor_left = bool(self.pid_velocity_motor_left)
      self.pid_velocity_motor_right = bool(self.pid_velocity_motor_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_enable_controllersResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_enable_controllersResponse(genpy.Message):
  _md5sum = "e20cb99203a04387a5b153211042f1e2"
  _type = "tb_msgs/srv_enable_controllersResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool enable_controller
bool pid_velocity_motor_left
bool pid_velocity_motor_right

"""
  __slots__ = ['enable_controller','pid_velocity_motor_left','pid_velocity_motor_right']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable_controller,pid_velocity_motor_left,pid_velocity_motor_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_enable_controllersResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable_controller is None:
        self.enable_controller = False
      if self.pid_velocity_motor_left is None:
        self.pid_velocity_motor_left = False
      if self.pid_velocity_motor_right is None:
        self.pid_velocity_motor_right = False
    else:
      self.enable_controller = False
      self.pid_velocity_motor_left = False
      self.pid_velocity_motor_right = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right,) = _get_struct_3B().unpack(str[start:end])
      self.enable_controller = bool(self.enable_controller)
      self.pid_velocity_motor_left = bool(self.pid_velocity_motor_left)
      self.pid_velocity_motor_right = bool(self.pid_velocity_motor_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.enable_controller, _x.pid_velocity_motor_left, _x.pid_velocity_motor_right,) = _get_struct_3B().unpack(str[start:end])
      self.enable_controller = bool(self.enable_controller)
      self.pid_velocity_motor_left = bool(self.pid_velocity_motor_left)
      self.pid_velocity_motor_right = bool(self.pid_velocity_motor_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
class srv_enable_controllers(object):
  _type          = 'tb_msgs/srv_enable_controllers'
  _md5sum = 'bc249f40feccfe734e2e04d1bb349677'
  _request_class  = srv_enable_controllersRequest
  _response_class = srv_enable_controllersResponse
