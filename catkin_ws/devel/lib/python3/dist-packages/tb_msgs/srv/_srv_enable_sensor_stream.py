# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_enable_sensor_streamRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_enable_sensor_streamRequest(genpy.Message):
  _md5sum = "b28b8e2dc41cd1bf5849be00f389c095"
  _type = "tb_msgs/srv_enable_sensor_streamRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool stream_enable #master switch: true - allow to config streams, fail: turn all stream off
bool enable_set_tbcore
bool tbcore

bool enable_set_servo_neck
bool servo_neck

bool enable_set_wheel_encoder
bool wheel_encoder

bool enable_set_servo_ext1
bool servo_ext1

bool enable_set_servo_ext2
bool servo_ext2
"""
  __slots__ = ['stream_enable','enable_set_tbcore','tbcore','enable_set_servo_neck','servo_neck','enable_set_wheel_encoder','wheel_encoder','enable_set_servo_ext1','servo_ext1','enable_set_servo_ext2','servo_ext2']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stream_enable,enable_set_tbcore,tbcore,enable_set_servo_neck,servo_neck,enable_set_wheel_encoder,wheel_encoder,enable_set_servo_ext1,servo_ext1,enable_set_servo_ext2,servo_ext2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_enable_sensor_streamRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stream_enable is None:
        self.stream_enable = False
      if self.enable_set_tbcore is None:
        self.enable_set_tbcore = False
      if self.tbcore is None:
        self.tbcore = False
      if self.enable_set_servo_neck is None:
        self.enable_set_servo_neck = False
      if self.servo_neck is None:
        self.servo_neck = False
      if self.enable_set_wheel_encoder is None:
        self.enable_set_wheel_encoder = False
      if self.wheel_encoder is None:
        self.wheel_encoder = False
      if self.enable_set_servo_ext1 is None:
        self.enable_set_servo_ext1 = False
      if self.servo_ext1 is None:
        self.servo_ext1 = False
      if self.enable_set_servo_ext2 is None:
        self.enable_set_servo_ext2 = False
      if self.servo_ext2 is None:
        self.servo_ext2 = False
    else:
      self.stream_enable = False
      self.enable_set_tbcore = False
      self.tbcore = False
      self.enable_set_servo_neck = False
      self.servo_neck = False
      self.enable_set_wheel_encoder = False
      self.wheel_encoder = False
      self.enable_set_servo_ext1 = False
      self.servo_ext1 = False
      self.enable_set_servo_ext2 = False
      self.servo_ext2 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.stream_enable, _x.enable_set_tbcore, _x.tbcore, _x.enable_set_servo_neck, _x.servo_neck, _x.enable_set_wheel_encoder, _x.wheel_encoder, _x.enable_set_servo_ext1, _x.servo_ext1, _x.enable_set_servo_ext2, _x.servo_ext2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.stream_enable, _x.enable_set_tbcore, _x.tbcore, _x.enable_set_servo_neck, _x.servo_neck, _x.enable_set_wheel_encoder, _x.wheel_encoder, _x.enable_set_servo_ext1, _x.servo_ext1, _x.enable_set_servo_ext2, _x.servo_ext2,) = _get_struct_11B().unpack(str[start:end])
      self.stream_enable = bool(self.stream_enable)
      self.enable_set_tbcore = bool(self.enable_set_tbcore)
      self.tbcore = bool(self.tbcore)
      self.enable_set_servo_neck = bool(self.enable_set_servo_neck)
      self.servo_neck = bool(self.servo_neck)
      self.enable_set_wheel_encoder = bool(self.enable_set_wheel_encoder)
      self.wheel_encoder = bool(self.wheel_encoder)
      self.enable_set_servo_ext1 = bool(self.enable_set_servo_ext1)
      self.servo_ext1 = bool(self.servo_ext1)
      self.enable_set_servo_ext2 = bool(self.enable_set_servo_ext2)
      self.servo_ext2 = bool(self.servo_ext2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.stream_enable, _x.enable_set_tbcore, _x.tbcore, _x.enable_set_servo_neck, _x.servo_neck, _x.enable_set_wheel_encoder, _x.wheel_encoder, _x.enable_set_servo_ext1, _x.servo_ext1, _x.enable_set_servo_ext2, _x.servo_ext2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.stream_enable, _x.enable_set_tbcore, _x.tbcore, _x.enable_set_servo_neck, _x.servo_neck, _x.enable_set_wheel_encoder, _x.wheel_encoder, _x.enable_set_servo_ext1, _x.servo_ext1, _x.enable_set_servo_ext2, _x.servo_ext2,) = _get_struct_11B().unpack(str[start:end])
      self.stream_enable = bool(self.stream_enable)
      self.enable_set_tbcore = bool(self.enable_set_tbcore)
      self.tbcore = bool(self.tbcore)
      self.enable_set_servo_neck = bool(self.enable_set_servo_neck)
      self.servo_neck = bool(self.servo_neck)
      self.enable_set_wheel_encoder = bool(self.enable_set_wheel_encoder)
      self.wheel_encoder = bool(self.wheel_encoder)
      self.enable_set_servo_ext1 = bool(self.enable_set_servo_ext1)
      self.servo_ext1 = bool(self.servo_ext1)
      self.enable_set_servo_ext2 = bool(self.enable_set_servo_ext2)
      self.servo_ext2 = bool(self.servo_ext2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11B = None
def _get_struct_11B():
    global _struct_11B
    if _struct_11B is None:
        _struct_11B = struct.Struct("<11B")
    return _struct_11B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_enable_sensor_streamResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_enable_sensor_streamResponse(genpy.Message):
  _md5sum = "a080106bc73be24a5869a19c4ce1ce3f"
  _type = "tb_msgs/srv_enable_sensor_streamResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#return current status
bool stream_enable
bool tbcore
bool servo_neck
bool wheel_encoder
bool servo_ext1
bool servo_ext2

"""
  __slots__ = ['stream_enable','tbcore','servo_neck','wheel_encoder','servo_ext1','servo_ext2']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stream_enable,tbcore,servo_neck,wheel_encoder,servo_ext1,servo_ext2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_enable_sensor_streamResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stream_enable is None:
        self.stream_enable = False
      if self.tbcore is None:
        self.tbcore = False
      if self.servo_neck is None:
        self.servo_neck = False
      if self.wheel_encoder is None:
        self.wheel_encoder = False
      if self.servo_ext1 is None:
        self.servo_ext1 = False
      if self.servo_ext2 is None:
        self.servo_ext2 = False
    else:
      self.stream_enable = False
      self.tbcore = False
      self.servo_neck = False
      self.wheel_encoder = False
      self.servo_ext1 = False
      self.servo_ext2 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.stream_enable, _x.tbcore, _x.servo_neck, _x.wheel_encoder, _x.servo_ext1, _x.servo_ext2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.stream_enable, _x.tbcore, _x.servo_neck, _x.wheel_encoder, _x.servo_ext1, _x.servo_ext2,) = _get_struct_6B().unpack(str[start:end])
      self.stream_enable = bool(self.stream_enable)
      self.tbcore = bool(self.tbcore)
      self.servo_neck = bool(self.servo_neck)
      self.wheel_encoder = bool(self.wheel_encoder)
      self.servo_ext1 = bool(self.servo_ext1)
      self.servo_ext2 = bool(self.servo_ext2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.stream_enable, _x.tbcore, _x.servo_neck, _x.wheel_encoder, _x.servo_ext1, _x.servo_ext2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.stream_enable, _x.tbcore, _x.servo_neck, _x.wheel_encoder, _x.servo_ext1, _x.servo_ext2,) = _get_struct_6B().unpack(str[start:end])
      self.stream_enable = bool(self.stream_enable)
      self.tbcore = bool(self.tbcore)
      self.servo_neck = bool(self.servo_neck)
      self.wheel_encoder = bool(self.wheel_encoder)
      self.servo_ext1 = bool(self.servo_ext1)
      self.servo_ext2 = bool(self.servo_ext2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
class srv_enable_sensor_stream(object):
  _type          = 'tb_msgs/srv_enable_sensor_stream'
  _md5sum = 'd63d86155ee6171206df3a787d89a0f1'
  _request_class  = srv_enable_sensor_streamRequest
  _response_class = srv_enable_sensor_streamResponse
