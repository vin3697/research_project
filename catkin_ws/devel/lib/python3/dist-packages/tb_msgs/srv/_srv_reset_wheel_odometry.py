# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_reset_wheel_odometryRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_reset_wheel_odometryRequest(genpy.Message):
  _md5sum = "d317ea579fecd8ec18fe3db1a99405a3"
  _type = "tb_msgs/srv_reset_wheel_odometryRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#wheel odometry is drift overtime, so we need to reset it to an external value
bool reset_xM
bool reset_yM
bool reset_yaw
#xM, yM: meter. yaw: rad
float64 xM
float64 yM
float64 yaw
"""
  __slots__ = ['reset_xM','reset_yM','reset_yaw','xM','yM','yaw']
  _slot_types = ['bool','bool','bool','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reset_xM,reset_yM,reset_yaw,xM,yM,yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_reset_wheel_odometryRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reset_xM is None:
        self.reset_xM = False
      if self.reset_yM is None:
        self.reset_yM = False
      if self.reset_yaw is None:
        self.reset_yaw = False
      if self.xM is None:
        self.xM = 0.
      if self.yM is None:
        self.yM = 0.
      if self.yaw is None:
        self.yaw = 0.
    else:
      self.reset_xM = False
      self.reset_yM = False
      self.reset_yaw = False
      self.xM = 0.
      self.yM = 0.
      self.yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B3d().pack(_x.reset_xM, _x.reset_yM, _x.reset_yaw, _x.xM, _x.yM, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.reset_xM, _x.reset_yM, _x.reset_yaw, _x.xM, _x.yM, _x.yaw,) = _get_struct_3B3d().unpack(str[start:end])
      self.reset_xM = bool(self.reset_xM)
      self.reset_yM = bool(self.reset_yM)
      self.reset_yaw = bool(self.reset_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B3d().pack(_x.reset_xM, _x.reset_yM, _x.reset_yaw, _x.xM, _x.yM, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.reset_xM, _x.reset_yM, _x.reset_yaw, _x.xM, _x.yM, _x.yaw,) = _get_struct_3B3d().unpack(str[start:end])
      self.reset_xM = bool(self.reset_xM)
      self.reset_yM = bool(self.reset_yM)
      self.reset_yaw = bool(self.reset_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B3d = None
def _get_struct_3B3d():
    global _struct_3B3d
    if _struct_3B3d is None:
        _struct_3B3d = struct.Struct("<3B3d")
    return _struct_3B3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb_msgs/srv_reset_wheel_odometryResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_reset_wheel_odometryResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "tb_msgs/srv_reset_wheel_odometryResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_reset_wheel_odometryResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class srv_reset_wheel_odometry(object):
  _type          = 'tb_msgs/srv_reset_wheel_odometry'
  _md5sum = 'd317ea579fecd8ec18fe3db1a99405a3'
  _request_class  = srv_reset_wheel_odometryRequest
  _response_class = srv_reset_wheel_odometryResponse
