// Generated by gencpp from file people_face_identification/ToogleAutoLearnFaceRequest.msg
// DO NOT EDIT!


#ifndef PEOPLE_FACE_IDENTIFICATION_MESSAGE_TOOGLEAUTOLEARNFACEREQUEST_H
#define PEOPLE_FACE_IDENTIFICATION_MESSAGE_TOOGLEAUTOLEARNFACEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace people_face_identification
{
template <class ContainerAllocator>
struct ToogleAutoLearnFaceRequest_
{
  typedef ToogleAutoLearnFaceRequest_<ContainerAllocator> Type;

  ToogleAutoLearnFaceRequest_()
    : isAutoLearn(false)  {
    }
  ToogleAutoLearnFaceRequest_(const ContainerAllocator& _alloc)
    : isAutoLearn(false)  {
  (void)_alloc;
    }



   typedef uint8_t _isAutoLearn_type;
  _isAutoLearn_type isAutoLearn;





  typedef boost::shared_ptr< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ToogleAutoLearnFaceRequest_

typedef ::people_face_identification::ToogleAutoLearnFaceRequest_<std::allocator<void> > ToogleAutoLearnFaceRequest;

typedef boost::shared_ptr< ::people_face_identification::ToogleAutoLearnFaceRequest > ToogleAutoLearnFaceRequestPtr;
typedef boost::shared_ptr< ::people_face_identification::ToogleAutoLearnFaceRequest const> ToogleAutoLearnFaceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator1> & lhs, const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.isAutoLearn == rhs.isAutoLearn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator1> & lhs, const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace people_face_identification

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fbb1f9a43eb73198c54f500eebd09e4";
  }

  static const char* value(const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fbb1f9a43eb7319ULL;
  static const uint64_t static_value2 = 0x8c54f500eebd09e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "people_face_identification/ToogleAutoLearnFaceRequest";
  }

  static const char* value(const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isAutoLearn\n"
;
  }

  static const char* value(const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isAutoLearn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToogleAutoLearnFaceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::people_face_identification::ToogleAutoLearnFaceRequest_<ContainerAllocator>& v)
  {
    s << indent << "isAutoLearn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isAutoLearn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEOPLE_FACE_IDENTIFICATION_MESSAGE_TOOGLEAUTOLEARNFACEREQUEST_H
