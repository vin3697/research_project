// Generated by gencpp from file tb_msgs/pose_controller_debug.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_POSE_CONTROLLER_DEBUG_H
#define TB_MSGS_MESSAGE_POSE_CONTROLLER_DEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tb_msgs
{
template <class ContainerAllocator>
struct pose_controller_debug_
{
  typedef pose_controller_debug_<ContainerAllocator> Type;

  pose_controller_debug_()
    : header()
    , current_x(0.0)
    , current_y(0.0)
    , current_yaw(0.0)
    , goal_x(0.0)
    , goal_y(0.0)
    , goal_yaw(0.0)
    , yaw_goalFrame(0.0)
    , direct_goalFrame(0.0)
    , e_d(0.0)
    , e_dir2goal(0.0)
    , e_yaw_poseFrame(0.0)
    , dir2goal_term(0.0)
    , yaw_term(0.0)
    , linear_vel(0.0)
    , angular_vel(0.0)
    , delta_x_goalFrame(0.0)
    , delta_y_goalFrame(0.0)  {
    }
  pose_controller_debug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , current_x(0.0)
    , current_y(0.0)
    , current_yaw(0.0)
    , goal_x(0.0)
    , goal_y(0.0)
    , goal_yaw(0.0)
    , yaw_goalFrame(0.0)
    , direct_goalFrame(0.0)
    , e_d(0.0)
    , e_dir2goal(0.0)
    , e_yaw_poseFrame(0.0)
    , dir2goal_term(0.0)
    , yaw_term(0.0)
    , linear_vel(0.0)
    , angular_vel(0.0)
    , delta_x_goalFrame(0.0)
    , delta_y_goalFrame(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _current_x_type;
  _current_x_type current_x;

   typedef double _current_y_type;
  _current_y_type current_y;

   typedef double _current_yaw_type;
  _current_yaw_type current_yaw;

   typedef double _goal_x_type;
  _goal_x_type goal_x;

   typedef double _goal_y_type;
  _goal_y_type goal_y;

   typedef double _goal_yaw_type;
  _goal_yaw_type goal_yaw;

   typedef double _yaw_goalFrame_type;
  _yaw_goalFrame_type yaw_goalFrame;

   typedef double _direct_goalFrame_type;
  _direct_goalFrame_type direct_goalFrame;

   typedef double _e_d_type;
  _e_d_type e_d;

   typedef double _e_dir2goal_type;
  _e_dir2goal_type e_dir2goal;

   typedef double _e_yaw_poseFrame_type;
  _e_yaw_poseFrame_type e_yaw_poseFrame;

   typedef double _dir2goal_term_type;
  _dir2goal_term_type dir2goal_term;

   typedef double _yaw_term_type;
  _yaw_term_type yaw_term;

   typedef double _linear_vel_type;
  _linear_vel_type linear_vel;

   typedef double _angular_vel_type;
  _angular_vel_type angular_vel;

   typedef double _delta_x_goalFrame_type;
  _delta_x_goalFrame_type delta_x_goalFrame;

   typedef double _delta_y_goalFrame_type;
  _delta_y_goalFrame_type delta_y_goalFrame;





  typedef boost::shared_ptr< ::tb_msgs::pose_controller_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::pose_controller_debug_<ContainerAllocator> const> ConstPtr;

}; // struct pose_controller_debug_

typedef ::tb_msgs::pose_controller_debug_<std::allocator<void> > pose_controller_debug;

typedef boost::shared_ptr< ::tb_msgs::pose_controller_debug > pose_controller_debugPtr;
typedef boost::shared_ptr< ::tb_msgs::pose_controller_debug const> pose_controller_debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::pose_controller_debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::pose_controller_debug_<ContainerAllocator1> & lhs, const ::tb_msgs::pose_controller_debug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.current_x == rhs.current_x &&
    lhs.current_y == rhs.current_y &&
    lhs.current_yaw == rhs.current_yaw &&
    lhs.goal_x == rhs.goal_x &&
    lhs.goal_y == rhs.goal_y &&
    lhs.goal_yaw == rhs.goal_yaw &&
    lhs.yaw_goalFrame == rhs.yaw_goalFrame &&
    lhs.direct_goalFrame == rhs.direct_goalFrame &&
    lhs.e_d == rhs.e_d &&
    lhs.e_dir2goal == rhs.e_dir2goal &&
    lhs.e_yaw_poseFrame == rhs.e_yaw_poseFrame &&
    lhs.dir2goal_term == rhs.dir2goal_term &&
    lhs.yaw_term == rhs.yaw_term &&
    lhs.linear_vel == rhs.linear_vel &&
    lhs.angular_vel == rhs.angular_vel &&
    lhs.delta_x_goalFrame == rhs.delta_x_goalFrame &&
    lhs.delta_y_goalFrame == rhs.delta_y_goalFrame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::pose_controller_debug_<ContainerAllocator1> & lhs, const ::tb_msgs::pose_controller_debug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::pose_controller_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::pose_controller_debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::pose_controller_debug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "045e579d8d07347ca60699ee052e6d60";
  }

  static const char* value(const ::tb_msgs::pose_controller_debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x045e579d8d07347cULL;
  static const uint64_t static_value2 = 0xa60699ee052e6d60ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/pose_controller_debug";
  }

  static const char* value(const ::tb_msgs::pose_controller_debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 current_x\n"
"float64 current_y\n"
"float64 current_yaw\n"
"float64 goal_x\n"
"float64 goal_y\n"
"float64 goal_yaw\n"
"float64 yaw_goalFrame\n"
"float64 direct_goalFrame\n"
"float64 e_d\n"
"float64 e_dir2goal\n"
"float64 e_yaw_poseFrame\n"
"float64 dir2goal_term\n"
"float64 yaw_term\n"
"float64 linear_vel\n"
"float64 angular_vel\n"
"float64 delta_x_goalFrame\n"
"float64 delta_y_goalFrame\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tb_msgs::pose_controller_debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.current_x);
      stream.next(m.current_y);
      stream.next(m.current_yaw);
      stream.next(m.goal_x);
      stream.next(m.goal_y);
      stream.next(m.goal_yaw);
      stream.next(m.yaw_goalFrame);
      stream.next(m.direct_goalFrame);
      stream.next(m.e_d);
      stream.next(m.e_dir2goal);
      stream.next(m.e_yaw_poseFrame);
      stream.next(m.dir2goal_term);
      stream.next(m.yaw_term);
      stream.next(m.linear_vel);
      stream.next(m.angular_vel);
      stream.next(m.delta_x_goalFrame);
      stream.next(m.delta_y_goalFrame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_controller_debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::pose_controller_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::pose_controller_debug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "current_x: ";
    Printer<double>::stream(s, indent + "  ", v.current_x);
    s << indent << "current_y: ";
    Printer<double>::stream(s, indent + "  ", v.current_y);
    s << indent << "current_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.current_yaw);
    s << indent << "goal_x: ";
    Printer<double>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<double>::stream(s, indent + "  ", v.goal_y);
    s << indent << "goal_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.goal_yaw);
    s << indent << "yaw_goalFrame: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_goalFrame);
    s << indent << "direct_goalFrame: ";
    Printer<double>::stream(s, indent + "  ", v.direct_goalFrame);
    s << indent << "e_d: ";
    Printer<double>::stream(s, indent + "  ", v.e_d);
    s << indent << "e_dir2goal: ";
    Printer<double>::stream(s, indent + "  ", v.e_dir2goal);
    s << indent << "e_yaw_poseFrame: ";
    Printer<double>::stream(s, indent + "  ", v.e_yaw_poseFrame);
    s << indent << "dir2goal_term: ";
    Printer<double>::stream(s, indent + "  ", v.dir2goal_term);
    s << indent << "yaw_term: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_term);
    s << indent << "linear_vel: ";
    Printer<double>::stream(s, indent + "  ", v.linear_vel);
    s << indent << "angular_vel: ";
    Printer<double>::stream(s, indent + "  ", v.angular_vel);
    s << indent << "delta_x_goalFrame: ";
    Printer<double>::stream(s, indent + "  ", v.delta_x_goalFrame);
    s << indent << "delta_y_goalFrame: ";
    Printer<double>::stream(s, indent + "  ", v.delta_y_goalFrame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_POSE_CONTROLLER_DEBUG_H
