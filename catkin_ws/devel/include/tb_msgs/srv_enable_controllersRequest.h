// Generated by gencpp from file tb_msgs/srv_enable_controllersRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_ENABLE_CONTROLLERSREQUEST_H
#define TB_MSGS_MESSAGE_SRV_ENABLE_CONTROLLERSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_enable_controllersRequest_
{
  typedef srv_enable_controllersRequest_<ContainerAllocator> Type;

  srv_enable_controllersRequest_()
    : enable_controller(false)
    , pid_velocity_motor_left(false)
    , pid_velocity_motor_right(false)  {
    }
  srv_enable_controllersRequest_(const ContainerAllocator& _alloc)
    : enable_controller(false)
    , pid_velocity_motor_left(false)
    , pid_velocity_motor_right(false)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_controller_type;
  _enable_controller_type enable_controller;

   typedef uint8_t _pid_velocity_motor_left_type;
  _pid_velocity_motor_left_type pid_velocity_motor_left;

   typedef uint8_t _pid_velocity_motor_right_type;
  _pid_velocity_motor_right_type pid_velocity_motor_right;





  typedef boost::shared_ptr< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_enable_controllersRequest_

typedef ::tb_msgs::srv_enable_controllersRequest_<std::allocator<void> > srv_enable_controllersRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_enable_controllersRequest > srv_enable_controllersRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_enable_controllersRequest const> srv_enable_controllersRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable_controller == rhs.enable_controller &&
    lhs.pid_velocity_motor_left == rhs.pid_velocity_motor_left &&
    lhs.pid_velocity_motor_right == rhs.pid_velocity_motor_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e20cb99203a04387a5b153211042f1e2";
  }

  static const char* value(const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe20cb99203a04387ULL;
  static const uint64_t static_value2 = 0xa5b153211042f1e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_enable_controllersRequest";
  }

  static const char* value(const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable_controller\n"
"bool pid_velocity_motor_left\n"
"bool pid_velocity_motor_right\n"
;
  }

  static const char* value(const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_controller);
      stream.next(m.pid_velocity_motor_left);
      stream.next(m.pid_velocity_motor_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_enable_controllersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_enable_controllersRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable_controller: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_controller);
    s << indent << "pid_velocity_motor_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pid_velocity_motor_left);
    s << indent << "pid_velocity_motor_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pid_velocity_motor_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_ENABLE_CONTROLLERSREQUEST_H
