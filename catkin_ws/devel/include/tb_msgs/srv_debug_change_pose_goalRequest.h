// Generated by gencpp from file tb_msgs/srv_debug_change_pose_goalRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_DEBUG_CHANGE_POSE_GOALREQUEST_H
#define TB_MSGS_MESSAGE_SRV_DEBUG_CHANGE_POSE_GOALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_debug_change_pose_goalRequest_
{
  typedef srv_debug_change_pose_goalRequest_<ContainerAllocator> Type;

  srv_debug_change_pose_goalRequest_()
    : frame_id()
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , dx(0.0)
    , dy(0.0)
    , dyaw(0.0)  {
    }
  srv_debug_change_pose_goalRequest_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , dx(0.0)
    , dy(0.0)
    , dyaw(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _dx_type;
  _dx_type dx;

   typedef double _dy_type;
  _dy_type dy;

   typedef double _dyaw_type;
  _dyaw_type dyaw;





  typedef boost::shared_ptr< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_debug_change_pose_goalRequest_

typedef ::tb_msgs::srv_debug_change_pose_goalRequest_<std::allocator<void> > srv_debug_change_pose_goalRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_debug_change_pose_goalRequest > srv_debug_change_pose_goalRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_debug_change_pose_goalRequest const> srv_debug_change_pose_goalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.dyaw == rhs.dyaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "554955877c62ff86110787ac7382b9db";
  }

  static const char* value(const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x554955877c62ff86ULL;
  static const uint64_t static_value2 = 0x110787ac7382b9dbULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_debug_change_pose_goalRequest";
  }

  static const char* value(const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#goal request definition\n"
"string frame_id\n"
"float64 x\n"
"float64 y\n"
"float64 yaw\n"
"float64 dx\n"
"float64 dy\n"
"float64 dyaw\n"
;
  }

  static const char* value(const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.dyaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_debug_change_pose_goalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_debug_change_pose_goalRequest_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "dx: ";
    Printer<double>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<double>::stream(s, indent + "  ", v.dy);
    s << indent << "dyaw: ";
    Printer<double>::stream(s, indent + "  ", v.dyaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_DEBUG_CHANGE_POSE_GOALREQUEST_H
