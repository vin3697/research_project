// Generated by gencpp from file tb_msgs/srv_servo_write_eepRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_SERVO_WRITE_EEPREQUEST_H
#define TB_MSGS_MESSAGE_SRV_SERVO_WRITE_EEPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_servo_write_eepRequest_
{
  typedef srv_servo_write_eepRequest_<ContainerAllocator> Type;

  srv_servo_write_eepRequest_()
    : sid(0)
    , address(0)
    , is_2bytes_address(false)
    , value(0)  {
    }
  srv_servo_write_eepRequest_(const ContainerAllocator& _alloc)
    : sid(0)
    , address(0)
    , is_2bytes_address(false)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _sid_type;
  _sid_type sid;

   typedef uint8_t _address_type;
  _address_type address;

   typedef uint8_t _is_2bytes_address_type;
  _is_2bytes_address_type is_2bytes_address;

   typedef uint16_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_servo_write_eepRequest_

typedef ::tb_msgs::srv_servo_write_eepRequest_<std::allocator<void> > srv_servo_write_eepRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_servo_write_eepRequest > srv_servo_write_eepRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_servo_write_eepRequest const> srv_servo_write_eepRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sid == rhs.sid &&
    lhs.address == rhs.address &&
    lhs.is_2bytes_address == rhs.is_2bytes_address &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8aaa44910eba83c9c77a09649fd2c5c3";
  }

  static const char* value(const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8aaa44910eba83c9ULL;
  static const uint64_t static_value2 = 0xc77a09649fd2c5c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_servo_write_eepRequest";
  }

  static const char* value(const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   sid\n"
"uint8   address\n"
"#the memory at this address could be 2 bytes or 1 byte\n"
"bool    is_2bytes_address\n"
"uint16  value\n"
;
  }

  static const char* value(const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sid);
      stream.next(m.address);
      stream.next(m.is_2bytes_address);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_servo_write_eepRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_servo_write_eepRequest_<ContainerAllocator>& v)
  {
    s << indent << "sid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sid);
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "is_2bytes_address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_2bytes_address);
    s << indent << "value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_SERVO_WRITE_EEPREQUEST_H
