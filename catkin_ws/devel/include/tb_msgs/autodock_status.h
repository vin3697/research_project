// Generated by gencpp from file tb_msgs/autodock_status.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_AUTODOCK_STATUS_H
#define TB_MSGS_MESSAGE_AUTODOCK_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct autodock_status_
{
  typedef autodock_status_<ContainerAllocator> Type;

  autodock_status_()
    : status(0)
    , result(0)  {
    }
  autodock_status_(const ContainerAllocator& _alloc)
    : status(0)
    , result(0)  {
  (void)_alloc;
    }



   typedef uint16_t _status_type;
  _status_type status;

   typedef uint8_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::tb_msgs::autodock_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::autodock_status_<ContainerAllocator> const> ConstPtr;

}; // struct autodock_status_

typedef ::tb_msgs::autodock_status_<std::allocator<void> > autodock_status;

typedef boost::shared_ptr< ::tb_msgs::autodock_status > autodock_statusPtr;
typedef boost::shared_ptr< ::tb_msgs::autodock_status const> autodock_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::autodock_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::autodock_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::autodock_status_<ContainerAllocator1> & lhs, const ::tb_msgs::autodock_status_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::autodock_status_<ContainerAllocator1> & lhs, const ::tb_msgs::autodock_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::autodock_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::autodock_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::autodock_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::autodock_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::autodock_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::autodock_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::autodock_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa53f1ca5451c39f7f6bb1e08e14803f";
  }

  static const char* value(const ::tb_msgs::autodock_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa53f1ca5451c39fULL;
  static const uint64_t static_value2 = 0x7f6bb1e08e14803fULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::autodock_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/autodock_status";
  }

  static const char* value(const ::tb_msgs::autodock_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::autodock_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 status # 0 - idle, 1 - started, 2 - waypoint1sent, 3 - wp1w, 4 - wp2s, 5 - wp2w, 6 - wp3s, 7 - wp3w, 8 - wp4s, 9 - wp4w, 10 - done\n"
"uint8  result # 0 - failed, 1 - succeeded, 2 - unknown\n"
;
  }

  static const char* value(const ::tb_msgs::autodock_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::autodock_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct autodock_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::autodock_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::autodock_status_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_AUTODOCK_STATUS_H
