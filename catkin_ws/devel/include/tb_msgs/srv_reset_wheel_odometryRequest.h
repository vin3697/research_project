// Generated by gencpp from file tb_msgs/srv_reset_wheel_odometryRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_RESET_WHEEL_ODOMETRYREQUEST_H
#define TB_MSGS_MESSAGE_SRV_RESET_WHEEL_ODOMETRYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_reset_wheel_odometryRequest_
{
  typedef srv_reset_wheel_odometryRequest_<ContainerAllocator> Type;

  srv_reset_wheel_odometryRequest_()
    : reset_xM(false)
    , reset_yM(false)
    , reset_yaw(false)
    , xM(0.0)
    , yM(0.0)
    , yaw(0.0)  {
    }
  srv_reset_wheel_odometryRequest_(const ContainerAllocator& _alloc)
    : reset_xM(false)
    , reset_yM(false)
    , reset_yaw(false)
    , xM(0.0)
    , yM(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_xM_type;
  _reset_xM_type reset_xM;

   typedef uint8_t _reset_yM_type;
  _reset_yM_type reset_yM;

   typedef uint8_t _reset_yaw_type;
  _reset_yaw_type reset_yaw;

   typedef double _xM_type;
  _xM_type xM;

   typedef double _yM_type;
  _yM_type yM;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_reset_wheel_odometryRequest_

typedef ::tb_msgs::srv_reset_wheel_odometryRequest_<std::allocator<void> > srv_reset_wheel_odometryRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_reset_wheel_odometryRequest > srv_reset_wheel_odometryRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_reset_wheel_odometryRequest const> srv_reset_wheel_odometryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reset_xM == rhs.reset_xM &&
    lhs.reset_yM == rhs.reset_yM &&
    lhs.reset_yaw == rhs.reset_yaw &&
    lhs.xM == rhs.xM &&
    lhs.yM == rhs.yM &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d317ea579fecd8ec18fe3db1a99405a3";
  }

  static const char* value(const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd317ea579fecd8ecULL;
  static const uint64_t static_value2 = 0x18fe3db1a99405a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_reset_wheel_odometryRequest";
  }

  static const char* value(const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#wheel odometry is drift overtime, so we need to reset it to an external value\n"
"bool reset_xM\n"
"bool reset_yM\n"
"bool reset_yaw\n"
"#xM, yM: meter. yaw: rad\n"
"float64 xM\n"
"float64 yM\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset_xM);
      stream.next(m.reset_yM);
      stream.next(m.reset_yaw);
      stream.next(m.xM);
      stream.next(m.yM);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_reset_wheel_odometryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_reset_wheel_odometryRequest_<ContainerAllocator>& v)
  {
    s << indent << "reset_xM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_xM);
    s << indent << "reset_yM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_yM);
    s << indent << "reset_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_yaw);
    s << indent << "xM: ";
    Printer<double>::stream(s, indent + "  ", v.xM);
    s << indent << "yM: ";
    Printer<double>::stream(s, indent + "  ", v.yM);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_RESET_WHEEL_ODOMETRYREQUEST_H
