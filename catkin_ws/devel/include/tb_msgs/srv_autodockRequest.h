// Generated by gencpp from file tb_msgs/srv_autodockRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_AUTODOCKREQUEST_H
#define TB_MSGS_MESSAGE_SRV_AUTODOCKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_autodockRequest_
{
  typedef srv_autodockRequest_<ContainerAllocator> Type;

  srv_autodockRequest_()
    : enable_autodock(false)  {
    }
  srv_autodockRequest_(const ContainerAllocator& _alloc)
    : enable_autodock(false)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_autodock_type;
  _enable_autodock_type enable_autodock;





  typedef boost::shared_ptr< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_autodockRequest_

typedef ::tb_msgs::srv_autodockRequest_<std::allocator<void> > srv_autodockRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_autodockRequest > srv_autodockRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_autodockRequest const> srv_autodockRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_autodockRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_autodockRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_autodockRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable_autodock == rhs.enable_autodock;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_autodockRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_autodockRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d09a58eaae498abfcc1bcbba8ec412f";
  }

  static const char* value(const ::tb_msgs::srv_autodockRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d09a58eaae498abULL;
  static const uint64_t static_value2 = 0xfcc1bcbba8ec412fULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_autodockRequest";
  }

  static const char* value(const ::tb_msgs::srv_autodockRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#goal request definition\n"
"bool enable_autodock\n"
;
  }

  static const char* value(const ::tb_msgs::srv_autodockRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_autodock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_autodockRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_autodockRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_autodockRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable_autodock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_autodock);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_AUTODOCKREQUEST_H
