// Generated by gencpp from file tb_msgs/srv_enable_sensor_streamRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_ENABLE_SENSOR_STREAMREQUEST_H
#define TB_MSGS_MESSAGE_SRV_ENABLE_SENSOR_STREAMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_enable_sensor_streamRequest_
{
  typedef srv_enable_sensor_streamRequest_<ContainerAllocator> Type;

  srv_enable_sensor_streamRequest_()
    : stream_enable(false)
    , enable_set_tbcore(false)
    , tbcore(false)
    , enable_set_servo_neck(false)
    , servo_neck(false)
    , enable_set_wheel_encoder(false)
    , wheel_encoder(false)
    , enable_set_servo_ext1(false)
    , servo_ext1(false)
    , enable_set_servo_ext2(false)
    , servo_ext2(false)  {
    }
  srv_enable_sensor_streamRequest_(const ContainerAllocator& _alloc)
    : stream_enable(false)
    , enable_set_tbcore(false)
    , tbcore(false)
    , enable_set_servo_neck(false)
    , servo_neck(false)
    , enable_set_wheel_encoder(false)
    , wheel_encoder(false)
    , enable_set_servo_ext1(false)
    , servo_ext1(false)
    , enable_set_servo_ext2(false)
    , servo_ext2(false)  {
  (void)_alloc;
    }



   typedef uint8_t _stream_enable_type;
  _stream_enable_type stream_enable;

   typedef uint8_t _enable_set_tbcore_type;
  _enable_set_tbcore_type enable_set_tbcore;

   typedef uint8_t _tbcore_type;
  _tbcore_type tbcore;

   typedef uint8_t _enable_set_servo_neck_type;
  _enable_set_servo_neck_type enable_set_servo_neck;

   typedef uint8_t _servo_neck_type;
  _servo_neck_type servo_neck;

   typedef uint8_t _enable_set_wheel_encoder_type;
  _enable_set_wheel_encoder_type enable_set_wheel_encoder;

   typedef uint8_t _wheel_encoder_type;
  _wheel_encoder_type wheel_encoder;

   typedef uint8_t _enable_set_servo_ext1_type;
  _enable_set_servo_ext1_type enable_set_servo_ext1;

   typedef uint8_t _servo_ext1_type;
  _servo_ext1_type servo_ext1;

   typedef uint8_t _enable_set_servo_ext2_type;
  _enable_set_servo_ext2_type enable_set_servo_ext2;

   typedef uint8_t _servo_ext2_type;
  _servo_ext2_type servo_ext2;





  typedef boost::shared_ptr< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_enable_sensor_streamRequest_

typedef ::tb_msgs::srv_enable_sensor_streamRequest_<std::allocator<void> > srv_enable_sensor_streamRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_enable_sensor_streamRequest > srv_enable_sensor_streamRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_enable_sensor_streamRequest const> srv_enable_sensor_streamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.stream_enable == rhs.stream_enable &&
    lhs.enable_set_tbcore == rhs.enable_set_tbcore &&
    lhs.tbcore == rhs.tbcore &&
    lhs.enable_set_servo_neck == rhs.enable_set_servo_neck &&
    lhs.servo_neck == rhs.servo_neck &&
    lhs.enable_set_wheel_encoder == rhs.enable_set_wheel_encoder &&
    lhs.wheel_encoder == rhs.wheel_encoder &&
    lhs.enable_set_servo_ext1 == rhs.enable_set_servo_ext1 &&
    lhs.servo_ext1 == rhs.servo_ext1 &&
    lhs.enable_set_servo_ext2 == rhs.enable_set_servo_ext2 &&
    lhs.servo_ext2 == rhs.servo_ext2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b28b8e2dc41cd1bf5849be00f389c095";
  }

  static const char* value(const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb28b8e2dc41cd1bfULL;
  static const uint64_t static_value2 = 0x5849be00f389c095ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_enable_sensor_streamRequest";
  }

  static const char* value(const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool stream_enable #master switch: true - allow to config streams, fail: turn all stream off\n"
"bool enable_set_tbcore\n"
"bool tbcore\n"
"\n"
"bool enable_set_servo_neck\n"
"bool servo_neck\n"
"\n"
"bool enable_set_wheel_encoder\n"
"bool wheel_encoder\n"
"\n"
"bool enable_set_servo_ext1\n"
"bool servo_ext1\n"
"\n"
"bool enable_set_servo_ext2\n"
"bool servo_ext2\n"
;
  }

  static const char* value(const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stream_enable);
      stream.next(m.enable_set_tbcore);
      stream.next(m.tbcore);
      stream.next(m.enable_set_servo_neck);
      stream.next(m.servo_neck);
      stream.next(m.enable_set_wheel_encoder);
      stream.next(m.wheel_encoder);
      stream.next(m.enable_set_servo_ext1);
      stream.next(m.servo_ext1);
      stream.next(m.enable_set_servo_ext2);
      stream.next(m.servo_ext2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_enable_sensor_streamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_enable_sensor_streamRequest_<ContainerAllocator>& v)
  {
    s << indent << "stream_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stream_enable);
    s << indent << "enable_set_tbcore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_set_tbcore);
    s << indent << "tbcore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tbcore);
    s << indent << "enable_set_servo_neck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_set_servo_neck);
    s << indent << "servo_neck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_neck);
    s << indent << "enable_set_wheel_encoder: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_set_wheel_encoder);
    s << indent << "wheel_encoder: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_encoder);
    s << indent << "enable_set_servo_ext1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_set_servo_ext1);
    s << indent << "servo_ext1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_ext1);
    s << indent << "enable_set_servo_ext2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_set_servo_ext2);
    s << indent << "servo_ext2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_ext2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_ENABLE_SENSOR_STREAMREQUEST_H
