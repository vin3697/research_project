// Generated by gencpp from file tb_msgs/servo_position.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SERVO_POSITION_H
#define TB_MSGS_MESSAGE_SERVO_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tb_msgs
{
template <class ContainerAllocator>
struct servo_position_
{
  typedef servo_position_<ContainerAllocator> Type;

  servo_position_()
    : header()
    , servo_pos_raw(0)
    , servo_pos_rad(0.0)
    , servo_pos_rad_cmd(0.0)
    , torque_cmd(0)  {
    }
  servo_position_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , servo_pos_raw(0)
    , servo_pos_rad(0.0)
    , servo_pos_rad_cmd(0.0)
    , torque_cmd(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _servo_pos_raw_type;
  _servo_pos_raw_type servo_pos_raw;

   typedef double _servo_pos_rad_type;
  _servo_pos_rad_type servo_pos_rad;

   typedef double _servo_pos_rad_cmd_type;
  _servo_pos_rad_cmd_type servo_pos_rad_cmd;

   typedef uint8_t _torque_cmd_type;
  _torque_cmd_type torque_cmd;





  typedef boost::shared_ptr< ::tb_msgs::servo_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::servo_position_<ContainerAllocator> const> ConstPtr;

}; // struct servo_position_

typedef ::tb_msgs::servo_position_<std::allocator<void> > servo_position;

typedef boost::shared_ptr< ::tb_msgs::servo_position > servo_positionPtr;
typedef boost::shared_ptr< ::tb_msgs::servo_position const> servo_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::servo_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::servo_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::servo_position_<ContainerAllocator1> & lhs, const ::tb_msgs::servo_position_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.servo_pos_raw == rhs.servo_pos_raw &&
    lhs.servo_pos_rad == rhs.servo_pos_rad &&
    lhs.servo_pos_rad_cmd == rhs.servo_pos_rad_cmd &&
    lhs.torque_cmd == rhs.torque_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::servo_position_<ContainerAllocator1> & lhs, const ::tb_msgs::servo_position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::servo_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::servo_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::servo_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::servo_position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::servo_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::servo_position_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::servo_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef1fb66c4e0036f16952270de306af9b";
  }

  static const char* value(const ::tb_msgs::servo_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef1fb66c4e0036f1ULL;
  static const uint64_t static_value2 = 0x6952270de306af9bULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::servo_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/servo_position";
  }

  static const char* value(const ::tb_msgs::servo_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::servo_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 servo_pos_raw #0-1023\n"
"float64 servo_pos_rad\n"
"float64  servo_pos_rad_cmd\n"
"#torque control mode:\n"
"#kBreak = 0,\n"
"#kOn = 1,\n"
"#kFree = 2\n"
"uint8    torque_cmd\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tb_msgs::servo_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::servo_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.servo_pos_raw);
      stream.next(m.servo_pos_rad);
      stream.next(m.servo_pos_rad_cmd);
      stream.next(m.torque_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::servo_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::servo_position_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "servo_pos_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo_pos_raw);
    s << indent << "servo_pos_rad: ";
    Printer<double>::stream(s, indent + "  ", v.servo_pos_rad);
    s << indent << "servo_pos_rad_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.servo_pos_rad_cmd);
    s << indent << "torque_cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SERVO_POSITION_H
