// Generated by gencpp from file tb_msgs/robot_state.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_ROBOT_STATE_H
#define TB_MSGS_MESSAGE_ROBOT_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tb_msgs
{
template <class ContainerAllocator>
struct robot_state_
{
  typedef robot_state_<ContainerAllocator> Type;

  robot_state_()
    : header()
    , accel_linear_xB(0.0)
    , accel_linear_yB(0.0)
    , accel_linear_zB(0.0)
    , accel_amplitude(0.0)
    , velo_linear_xB_m_wheelLeft_gyroZ(0.0)
    , velo_linear_xB_m_wheelRight_gyroZ(0.0)
    , velo_linear_xB_m_wheel(0.0)
    , velo_angular_zB_m_wheel(0.0)
    , wheel_left_velo_rad(0.0)
    , wheel_right_velo_rad(0.0)
    , vel_xM(0.0)
    , vel_yM(0.0)
    , vel_zM(0.0)
    , pos_xM(0.0)
    , pos_yM(0.0)
    , pos_zM(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  robot_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accel_linear_xB(0.0)
    , accel_linear_yB(0.0)
    , accel_linear_zB(0.0)
    , accel_amplitude(0.0)
    , velo_linear_xB_m_wheelLeft_gyroZ(0.0)
    , velo_linear_xB_m_wheelRight_gyroZ(0.0)
    , velo_linear_xB_m_wheel(0.0)
    , velo_angular_zB_m_wheel(0.0)
    , wheel_left_velo_rad(0.0)
    , wheel_right_velo_rad(0.0)
    , vel_xM(0.0)
    , vel_yM(0.0)
    , vel_zM(0.0)
    , pos_xM(0.0)
    , pos_yM(0.0)
    , pos_zM(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _accel_linear_xB_type;
  _accel_linear_xB_type accel_linear_xB;

   typedef double _accel_linear_yB_type;
  _accel_linear_yB_type accel_linear_yB;

   typedef double _accel_linear_zB_type;
  _accel_linear_zB_type accel_linear_zB;

   typedef double _accel_amplitude_type;
  _accel_amplitude_type accel_amplitude;

   typedef double _velo_linear_xB_m_wheelLeft_gyroZ_type;
  _velo_linear_xB_m_wheelLeft_gyroZ_type velo_linear_xB_m_wheelLeft_gyroZ;

   typedef double _velo_linear_xB_m_wheelRight_gyroZ_type;
  _velo_linear_xB_m_wheelRight_gyroZ_type velo_linear_xB_m_wheelRight_gyroZ;

   typedef double _velo_linear_xB_m_wheel_type;
  _velo_linear_xB_m_wheel_type velo_linear_xB_m_wheel;

   typedef double _velo_angular_zB_m_wheel_type;
  _velo_angular_zB_m_wheel_type velo_angular_zB_m_wheel;

   typedef double _wheel_left_velo_rad_type;
  _wheel_left_velo_rad_type wheel_left_velo_rad;

   typedef double _wheel_right_velo_rad_type;
  _wheel_right_velo_rad_type wheel_right_velo_rad;

   typedef double _vel_xM_type;
  _vel_xM_type vel_xM;

   typedef double _vel_yM_type;
  _vel_yM_type vel_yM;

   typedef double _vel_zM_type;
  _vel_zM_type vel_zM;

   typedef double _pos_xM_type;
  _pos_xM_type pos_xM;

   typedef double _pos_yM_type;
  _pos_yM_type pos_yM;

   typedef double _pos_zM_type;
  _pos_zM_type pos_zM;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::tb_msgs::robot_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::robot_state_<ContainerAllocator> const> ConstPtr;

}; // struct robot_state_

typedef ::tb_msgs::robot_state_<std::allocator<void> > robot_state;

typedef boost::shared_ptr< ::tb_msgs::robot_state > robot_statePtr;
typedef boost::shared_ptr< ::tb_msgs::robot_state const> robot_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::robot_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::robot_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::robot_state_<ContainerAllocator1> & lhs, const ::tb_msgs::robot_state_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.accel_linear_xB == rhs.accel_linear_xB &&
    lhs.accel_linear_yB == rhs.accel_linear_yB &&
    lhs.accel_linear_zB == rhs.accel_linear_zB &&
    lhs.accel_amplitude == rhs.accel_amplitude &&
    lhs.velo_linear_xB_m_wheelLeft_gyroZ == rhs.velo_linear_xB_m_wheelLeft_gyroZ &&
    lhs.velo_linear_xB_m_wheelRight_gyroZ == rhs.velo_linear_xB_m_wheelRight_gyroZ &&
    lhs.velo_linear_xB_m_wheel == rhs.velo_linear_xB_m_wheel &&
    lhs.velo_angular_zB_m_wheel == rhs.velo_angular_zB_m_wheel &&
    lhs.wheel_left_velo_rad == rhs.wheel_left_velo_rad &&
    lhs.wheel_right_velo_rad == rhs.wheel_right_velo_rad &&
    lhs.vel_xM == rhs.vel_xM &&
    lhs.vel_yM == rhs.vel_yM &&
    lhs.vel_zM == rhs.vel_zM &&
    lhs.pos_xM == rhs.pos_xM &&
    lhs.pos_yM == rhs.pos_yM &&
    lhs.pos_zM == rhs.pos_zM &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::robot_state_<ContainerAllocator1> & lhs, const ::tb_msgs::robot_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::robot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::robot_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::robot_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::robot_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::robot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::robot_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::robot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c08d840bd7be0b6d8515162731602842";
  }

  static const char* value(const ::tb_msgs::robot_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc08d840bd7be0b6dULL;
  static const uint64_t static_value2 = 0x8515162731602842ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::robot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/robot_state";
  }

  static const char* value(const ::tb_msgs::robot_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::robot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"#From IMU\n"
"float64 accel_linear_xB\n"
"float64 accel_linear_yB\n"
"float64 accel_linear_zB\n"
"float64 accel_amplitude\n"
"#From IMU and wheel encoder\n"
"float64 velo_linear_xB_m_wheelLeft_gyroZ\n"
"float64 velo_linear_xB_m_wheelRight_gyroZ\n"
"\n"
"#Frome wheel encoder only\n"
"float64 velo_linear_xB_m_wheel\n"
"float64 velo_angular_zB_m_wheel\n"
"float64 wheel_left_velo_rad\n"
"float64 wheel_right_velo_rad\n"
"\n"
"#Best result\n"
"float64 vel_xM\n"
"float64 vel_yM\n"
"float64 vel_zM\n"
"\n"
"float64 pos_xM\n"
"float64 pos_yM\n"
"float64 pos_zM\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tb_msgs::robot_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::robot_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accel_linear_xB);
      stream.next(m.accel_linear_yB);
      stream.next(m.accel_linear_zB);
      stream.next(m.accel_amplitude);
      stream.next(m.velo_linear_xB_m_wheelLeft_gyroZ);
      stream.next(m.velo_linear_xB_m_wheelRight_gyroZ);
      stream.next(m.velo_linear_xB_m_wheel);
      stream.next(m.velo_angular_zB_m_wheel);
      stream.next(m.wheel_left_velo_rad);
      stream.next(m.wheel_right_velo_rad);
      stream.next(m.vel_xM);
      stream.next(m.vel_yM);
      stream.next(m.vel_zM);
      stream.next(m.pos_xM);
      stream.next(m.pos_yM);
      stream.next(m.pos_zM);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::robot_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::robot_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accel_linear_xB: ";
    Printer<double>::stream(s, indent + "  ", v.accel_linear_xB);
    s << indent << "accel_linear_yB: ";
    Printer<double>::stream(s, indent + "  ", v.accel_linear_yB);
    s << indent << "accel_linear_zB: ";
    Printer<double>::stream(s, indent + "  ", v.accel_linear_zB);
    s << indent << "accel_amplitude: ";
    Printer<double>::stream(s, indent + "  ", v.accel_amplitude);
    s << indent << "velo_linear_xB_m_wheelLeft_gyroZ: ";
    Printer<double>::stream(s, indent + "  ", v.velo_linear_xB_m_wheelLeft_gyroZ);
    s << indent << "velo_linear_xB_m_wheelRight_gyroZ: ";
    Printer<double>::stream(s, indent + "  ", v.velo_linear_xB_m_wheelRight_gyroZ);
    s << indent << "velo_linear_xB_m_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.velo_linear_xB_m_wheel);
    s << indent << "velo_angular_zB_m_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.velo_angular_zB_m_wheel);
    s << indent << "wheel_left_velo_rad: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_left_velo_rad);
    s << indent << "wheel_right_velo_rad: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_right_velo_rad);
    s << indent << "vel_xM: ";
    Printer<double>::stream(s, indent + "  ", v.vel_xM);
    s << indent << "vel_yM: ";
    Printer<double>::stream(s, indent + "  ", v.vel_yM);
    s << indent << "vel_zM: ";
    Printer<double>::stream(s, indent + "  ", v.vel_zM);
    s << indent << "pos_xM: ";
    Printer<double>::stream(s, indent + "  ", v.pos_xM);
    s << indent << "pos_yM: ";
    Printer<double>::stream(s, indent + "  ", v.pos_yM);
    s << indent << "pos_zM: ";
    Printer<double>::stream(s, indent + "  ", v.pos_zM);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_ROBOT_STATE_H
