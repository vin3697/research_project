// Generated by gencpp from file tb_msgs/tbcore_status.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_TBCORE_STATUS_H
#define TB_MSGS_MESSAGE_TBCORE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tb_msgs
{
template <class ContainerAllocator>
struct tbcore_status_
{
  typedef tbcore_status_<ContainerAllocator> Type;

  tbcore_status_()
    : header()
    , voltage_cell_1(0)
    , voltage_cell_2(0)
    , voltage_cell_3(0)
    , voltage_cell_4(0)
    , voltage_cell_5(0)
    , charging_current(0)
    , docked_status(0)
    , fet_status(0)
    , status_1(0)
    , status_2(0)
    , status_3(0)
    , status_4(0)  {
    }
  tbcore_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage_cell_1(0)
    , voltage_cell_2(0)
    , voltage_cell_3(0)
    , voltage_cell_4(0)
    , voltage_cell_5(0)
    , charging_current(0)
    , docked_status(0)
    , fet_status(0)
    , status_1(0)
    , status_2(0)
    , status_3(0)
    , status_4(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _voltage_cell_1_type;
  _voltage_cell_1_type voltage_cell_1;

   typedef uint16_t _voltage_cell_2_type;
  _voltage_cell_2_type voltage_cell_2;

   typedef uint16_t _voltage_cell_3_type;
  _voltage_cell_3_type voltage_cell_3;

   typedef uint16_t _voltage_cell_4_type;
  _voltage_cell_4_type voltage_cell_4;

   typedef uint16_t _voltage_cell_5_type;
  _voltage_cell_5_type voltage_cell_5;

   typedef int16_t _charging_current_type;
  _charging_current_type charging_current;

   typedef uint8_t _docked_status_type;
  _docked_status_type docked_status;

   typedef uint8_t _fet_status_type;
  _fet_status_type fet_status;

   typedef uint8_t _status_1_type;
  _status_1_type status_1;

   typedef uint8_t _status_2_type;
  _status_2_type status_2;

   typedef uint8_t _status_3_type;
  _status_3_type status_3;

   typedef uint8_t _status_4_type;
  _status_4_type status_4;





  typedef boost::shared_ptr< ::tb_msgs::tbcore_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::tbcore_status_<ContainerAllocator> const> ConstPtr;

}; // struct tbcore_status_

typedef ::tb_msgs::tbcore_status_<std::allocator<void> > tbcore_status;

typedef boost::shared_ptr< ::tb_msgs::tbcore_status > tbcore_statusPtr;
typedef boost::shared_ptr< ::tb_msgs::tbcore_status const> tbcore_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::tbcore_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::tbcore_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::tbcore_status_<ContainerAllocator1> & lhs, const ::tb_msgs::tbcore_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.voltage_cell_1 == rhs.voltage_cell_1 &&
    lhs.voltage_cell_2 == rhs.voltage_cell_2 &&
    lhs.voltage_cell_3 == rhs.voltage_cell_3 &&
    lhs.voltage_cell_4 == rhs.voltage_cell_4 &&
    lhs.voltage_cell_5 == rhs.voltage_cell_5 &&
    lhs.charging_current == rhs.charging_current &&
    lhs.docked_status == rhs.docked_status &&
    lhs.fet_status == rhs.fet_status &&
    lhs.status_1 == rhs.status_1 &&
    lhs.status_2 == rhs.status_2 &&
    lhs.status_3 == rhs.status_3 &&
    lhs.status_4 == rhs.status_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::tbcore_status_<ContainerAllocator1> & lhs, const ::tb_msgs::tbcore_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::tbcore_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::tbcore_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::tbcore_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::tbcore_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::tbcore_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::tbcore_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::tbcore_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ec9d100db1d1ff2c7cd531de3097f23";
  }

  static const char* value(const ::tb_msgs::tbcore_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ec9d100db1d1ff2ULL;
  static const uint64_t static_value2 = 0xc7cd531de3097f23ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::tbcore_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/tbcore_status";
  }

  static const char* value(const ::tb_msgs::tbcore_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::tbcore_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 voltage_cell_1\n"
"uint16 voltage_cell_2\n"
"uint16 voltage_cell_3\n"
"uint16 voltage_cell_4\n"
"uint16 voltage_cell_5\n"
"int16 charging_current\n"
"uint8 docked_status\n"
"uint8 fet_status\n"
"uint8 status_1\n"
"uint8 status_2\n"
"uint8 status_3\n"
"uint8 status_4\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tb_msgs::tbcore_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::tbcore_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage_cell_1);
      stream.next(m.voltage_cell_2);
      stream.next(m.voltage_cell_3);
      stream.next(m.voltage_cell_4);
      stream.next(m.voltage_cell_5);
      stream.next(m.charging_current);
      stream.next(m.docked_status);
      stream.next(m.fet_status);
      stream.next(m.status_1);
      stream.next(m.status_2);
      stream.next(m.status_3);
      stream.next(m.status_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tbcore_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::tbcore_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::tbcore_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage_cell_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage_cell_1);
    s << indent << "voltage_cell_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage_cell_2);
    s << indent << "voltage_cell_3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage_cell_3);
    s << indent << "voltage_cell_4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage_cell_4);
    s << indent << "voltage_cell_5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage_cell_5);
    s << indent << "charging_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.charging_current);
    s << indent << "docked_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.docked_status);
    s << indent << "fet_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fet_status);
    s << indent << "status_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_1);
    s << indent << "status_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_2);
    s << indent << "status_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_3);
    s << indent << "status_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_TBCORE_STATUS_H
