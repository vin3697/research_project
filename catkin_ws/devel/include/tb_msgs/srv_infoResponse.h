// Generated by gencpp from file tb_msgs/srv_infoResponse.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_INFORESPONSE_H
#define TB_MSGS_MESSAGE_SRV_INFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_infoResponse_
{
  typedef srv_infoResponse_<ContainerAllocator> Type;

  srv_infoResponse_()
    : is_connected(false)
    , port_name()
    , is_online(false)  {
    }
  srv_infoResponse_(const ContainerAllocator& _alloc)
    : is_connected(false)
    , port_name(_alloc)
    , is_online(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_connected_type;
  _is_connected_type is_connected;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _port_name_type;
  _port_name_type port_name;

   typedef uint8_t _is_online_type;
  _is_online_type is_online;





  typedef boost::shared_ptr< ::tb_msgs::srv_infoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_infoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct srv_infoResponse_

typedef ::tb_msgs::srv_infoResponse_<std::allocator<void> > srv_infoResponse;

typedef boost::shared_ptr< ::tb_msgs::srv_infoResponse > srv_infoResponsePtr;
typedef boost::shared_ptr< ::tb_msgs::srv_infoResponse const> srv_infoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_infoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_infoResponse_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_infoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_connected == rhs.is_connected &&
    lhs.port_name == rhs.port_name &&
    lhs.is_online == rhs.is_online;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_infoResponse_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_infoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_infoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f86e31daa814216fe719a934e908e836";
  }

  static const char* value(const ::tb_msgs::srv_infoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf86e31daa814216fULL;
  static const uint64_t static_value2 = 0xe719a934e908e836ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_infoResponse";
  }

  static const char* value(const ::tb_msgs::srv_infoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_connected\n"
"string port_name\n"
"bool is_online\n"
"\n"
;
  }

  static const char* value(const ::tb_msgs::srv_infoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_connected);
      stream.next(m.port_name);
      stream.next(m.is_online);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_infoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_infoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_infoResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_connected);
    s << indent << "port_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.port_name);
    s << indent << "is_online: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_online);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_INFORESPONSE_H
