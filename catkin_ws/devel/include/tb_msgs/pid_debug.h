// Generated by gencpp from file tb_msgs/pid_debug.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_PID_DEBUG_H
#define TB_MSGS_MESSAGE_PID_DEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tb_msgs
{
template <class ContainerAllocator>
struct pid_debug_
{
  typedef pid_debug_<ContainerAllocator> Type;

  pid_debug_()
    : header()
    , pid_id(0)
    , feedback(0.0)
    , output(0.0)
    , output_p(0.0)
    , output_i(0.0)
    , output_d(0.0)
    , feedforward(0.0)
    , setpoint(0.0)  {
    }
  pid_debug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pid_id(0)
    , feedback(0.0)
    , output(0.0)
    , output_p(0.0)
    , output_i(0.0)
    , output_d(0.0)
    , feedforward(0.0)
    , setpoint(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _pid_id_type;
  _pid_id_type pid_id;

   typedef double _feedback_type;
  _feedback_type feedback;

   typedef double _output_type;
  _output_type output;

   typedef double _output_p_type;
  _output_p_type output_p;

   typedef double _output_i_type;
  _output_i_type output_i;

   typedef double _output_d_type;
  _output_d_type output_d;

   typedef double _feedforward_type;
  _feedforward_type feedforward;

   typedef double _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::tb_msgs::pid_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::pid_debug_<ContainerAllocator> const> ConstPtr;

}; // struct pid_debug_

typedef ::tb_msgs::pid_debug_<std::allocator<void> > pid_debug;

typedef boost::shared_ptr< ::tb_msgs::pid_debug > pid_debugPtr;
typedef boost::shared_ptr< ::tb_msgs::pid_debug const> pid_debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::pid_debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::pid_debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::pid_debug_<ContainerAllocator1> & lhs, const ::tb_msgs::pid_debug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pid_id == rhs.pid_id &&
    lhs.feedback == rhs.feedback &&
    lhs.output == rhs.output &&
    lhs.output_p == rhs.output_p &&
    lhs.output_i == rhs.output_i &&
    lhs.output_d == rhs.output_d &&
    lhs.feedforward == rhs.feedforward &&
    lhs.setpoint == rhs.setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::pid_debug_<ContainerAllocator1> & lhs, const ::tb_msgs::pid_debug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::pid_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::pid_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::pid_debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::pid_debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::pid_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::pid_debug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::pid_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "425ffa0c728030ffa37a8e40ff6d17e8";
  }

  static const char* value(const ::tb_msgs::pid_debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x425ffa0c728030ffULL;
  static const uint64_t static_value2 = 0xa37a8e40ff6d17e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::pid_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/pid_debug";
  }

  static const char* value(const ::tb_msgs::pid_debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::pid_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8  pid_id\n"
"float64 feedback\n"
"float64 output\n"
"float64 output_p\n"
"float64 output_i\n"
"float64 output_d\n"
"float64 feedforward\n"
"float64 setpoint\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tb_msgs::pid_debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::pid_debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pid_id);
      stream.next(m.feedback);
      stream.next(m.output);
      stream.next(m.output_p);
      stream.next(m.output_i);
      stream.next(m.output_d);
      stream.next(m.feedforward);
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::pid_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::pid_debug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pid_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pid_id);
    s << indent << "feedback: ";
    Printer<double>::stream(s, indent + "  ", v.feedback);
    s << indent << "output: ";
    Printer<double>::stream(s, indent + "  ", v.output);
    s << indent << "output_p: ";
    Printer<double>::stream(s, indent + "  ", v.output_p);
    s << indent << "output_i: ";
    Printer<double>::stream(s, indent + "  ", v.output_i);
    s << indent << "output_d: ";
    Printer<double>::stream(s, indent + "  ", v.output_d);
    s << indent << "feedforward: ";
    Printer<double>::stream(s, indent + "  ", v.feedforward);
    s << indent << "setpoint: ";
    Printer<double>::stream(s, indent + "  ", v.setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_PID_DEBUG_H
