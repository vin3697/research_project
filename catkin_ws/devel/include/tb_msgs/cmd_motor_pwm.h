// Generated by gencpp from file tb_msgs/cmd_motor_pwm.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_CMD_MOTOR_PWM_H
#define TB_MSGS_MESSAGE_CMD_MOTOR_PWM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tb_msgs
{
template <class ContainerAllocator>
struct cmd_motor_pwm_
{
  typedef cmd_motor_pwm_<ContainerAllocator> Type;

  cmd_motor_pwm_()
    : header()
    , motor_1_enable(false)
    , pwm_motor_1(0.0)
    , baseoffset_1(0)
    , motor_2_enable(false)
    , pwm_motor_2(0.0)
    , baseoffset_2(0)  {
    }
  cmd_motor_pwm_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motor_1_enable(false)
    , pwm_motor_1(0.0)
    , baseoffset_1(0)
    , motor_2_enable(false)
    , pwm_motor_2(0.0)
    , baseoffset_2(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _motor_1_enable_type;
  _motor_1_enable_type motor_1_enable;

   typedef double _pwm_motor_1_type;
  _pwm_motor_1_type pwm_motor_1;

   typedef uint16_t _baseoffset_1_type;
  _baseoffset_1_type baseoffset_1;

   typedef uint8_t _motor_2_enable_type;
  _motor_2_enable_type motor_2_enable;

   typedef double _pwm_motor_2_type;
  _pwm_motor_2_type pwm_motor_2;

   typedef uint16_t _baseoffset_2_type;
  _baseoffset_2_type baseoffset_2;





  typedef boost::shared_ptr< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_motor_pwm_

typedef ::tb_msgs::cmd_motor_pwm_<std::allocator<void> > cmd_motor_pwm;

typedef boost::shared_ptr< ::tb_msgs::cmd_motor_pwm > cmd_motor_pwmPtr;
typedef boost::shared_ptr< ::tb_msgs::cmd_motor_pwm const> cmd_motor_pwmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator1> & lhs, const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.motor_1_enable == rhs.motor_1_enable &&
    lhs.pwm_motor_1 == rhs.pwm_motor_1 &&
    lhs.baseoffset_1 == rhs.baseoffset_1 &&
    lhs.motor_2_enable == rhs.motor_2_enable &&
    lhs.pwm_motor_2 == rhs.pwm_motor_2 &&
    lhs.baseoffset_2 == rhs.baseoffset_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator1> & lhs, const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94dfec4e869196e493f45bf1370261b6";
  }

  static const char* value(const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94dfec4e869196e4ULL;
  static const uint64_t static_value2 = 0x93f45bf1370261b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/cmd_motor_pwm";
  }

  static const char* value(const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"#Set PWM value for each motor from -1000 to 1000\n"
"# motor_i_enable:\n"
"#   true: set PWM = motor_i value\n"
"#   false: set PWM = 0\n"
"bool motor_1_enable\n"
"float64 pwm_motor_1\n"
"uint16 baseoffset_1\n"
"\n"
"bool motor_2_enable\n"
"float64 pwm_motor_2\n"
"uint16 baseoffset_2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motor_1_enable);
      stream.next(m.pwm_motor_1);
      stream.next(m.baseoffset_1);
      stream.next(m.motor_2_enable);
      stream.next(m.pwm_motor_2);
      stream.next(m.baseoffset_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_motor_pwm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::cmd_motor_pwm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::cmd_motor_pwm_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor_1_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_1_enable);
    s << indent << "pwm_motor_1: ";
    Printer<double>::stream(s, indent + "  ", v.pwm_motor_1);
    s << indent << "baseoffset_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.baseoffset_1);
    s << indent << "motor_2_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_2_enable);
    s << indent << "pwm_motor_2: ";
    Printer<double>::stream(s, indent + "  ", v.pwm_motor_2);
    s << indent << "baseoffset_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.baseoffset_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_CMD_MOTOR_PWM_H
