// Generated by gencpp from file tb_msgs/srv_ardock_camera_controlResponse.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_ARDOCK_CAMERA_CONTROLRESPONSE_H
#define TB_MSGS_MESSAGE_SRV_ARDOCK_CAMERA_CONTROLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_ardock_camera_controlResponse_
{
  typedef srv_ardock_camera_controlResponse_<ContainerAllocator> Type;

  srv_ardock_camera_controlResponse_()
    : default_exposure(0)  {
    }
  srv_ardock_camera_controlResponse_(const ContainerAllocator& _alloc)
    : default_exposure(0)  {
  (void)_alloc;
    }



   typedef int32_t _default_exposure_type;
  _default_exposure_type default_exposure;





  typedef boost::shared_ptr< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct srv_ardock_camera_controlResponse_

typedef ::tb_msgs::srv_ardock_camera_controlResponse_<std::allocator<void> > srv_ardock_camera_controlResponse;

typedef boost::shared_ptr< ::tb_msgs::srv_ardock_camera_controlResponse > srv_ardock_camera_controlResponsePtr;
typedef boost::shared_ptr< ::tb_msgs::srv_ardock_camera_controlResponse const> srv_ardock_camera_controlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.default_exposure == rhs.default_exposure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e254d5f0dcb4fb7dec2d57f48713560";
  }

  static const char* value(const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e254d5f0dcb4fb7ULL;
  static const uint64_t static_value2 = 0xdec2d57f48713560ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_ardock_camera_controlResponse";
  }

  static const char* value(const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#response\n"
"int32 default_exposure\n"
"\n"
;
  }

  static const char* value(const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.default_exposure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_ardock_camera_controlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_ardock_camera_controlResponse_<ContainerAllocator>& v)
  {
    s << indent << "default_exposure: ";
    Printer<int32_t>::stream(s, indent + "  ", v.default_exposure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_ARDOCK_CAMERA_CONTROLRESPONSE_H
