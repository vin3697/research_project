// Generated by gencpp from file tb_msgs/srv_set_pidResponse.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_SET_PIDRESPONSE_H
#define TB_MSGS_MESSAGE_SRV_SET_PIDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_set_pidResponse_
{
  typedef srv_set_pidResponse_<ContainerAllocator> Type;

  srv_set_pidResponse_()
    : pid_id(0)
    , p_value(0.0)
    , i_value(0.0)
    , d_value(0.0)
    , setpoint(0.0)  {
    }
  srv_set_pidResponse_(const ContainerAllocator& _alloc)
    : pid_id(0)
    , p_value(0.0)
    , i_value(0.0)
    , d_value(0.0)
    , setpoint(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _pid_id_type;
  _pid_id_type pid_id;

   typedef double _p_value_type;
  _p_value_type p_value;

   typedef double _i_value_type;
  _i_value_type i_value;

   typedef double _d_value_type;
  _d_value_type d_value;

   typedef double _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> const> ConstPtr;

}; // struct srv_set_pidResponse_

typedef ::tb_msgs::srv_set_pidResponse_<std::allocator<void> > srv_set_pidResponse;

typedef boost::shared_ptr< ::tb_msgs::srv_set_pidResponse > srv_set_pidResponsePtr;
typedef boost::shared_ptr< ::tb_msgs::srv_set_pidResponse const> srv_set_pidResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pid_id == rhs.pid_id &&
    lhs.p_value == rhs.p_value &&
    lhs.i_value == rhs.i_value &&
    lhs.d_value == rhs.d_value &&
    lhs.setpoint == rhs.setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bcb7a9e99ff40aa8515155586af2bea7";
  }

  static const char* value(const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbcb7a9e99ff40aa8ULL;
  static const uint64_t static_value2 = 0x515155586af2bea7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_set_pidResponse";
  }

  static const char* value(const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 pid_id\n"
"float64 p_value\n"
"float64 i_value\n"
"float64 d_value\n"
"float64 setpoint\n"
"\n"
;
  }

  static const char* value(const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pid_id);
      stream.next(m.p_value);
      stream.next(m.i_value);
      stream.next(m.d_value);
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_set_pidResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_set_pidResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_set_pidResponse_<ContainerAllocator>& v)
  {
    s << indent << "pid_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pid_id);
    s << indent << "p_value: ";
    Printer<double>::stream(s, indent + "  ", v.p_value);
    s << indent << "i_value: ";
    Printer<double>::stream(s, indent + "  ", v.i_value);
    s << indent << "d_value: ";
    Printer<double>::stream(s, indent + "  ", v.d_value);
    s << indent << "setpoint: ";
    Printer<double>::stream(s, indent + "  ", v.setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_SET_PIDRESPONSE_H
