// Generated by gencpp from file tb_msgs/srv_vo_resetRequest.msg
// DO NOT EDIT!


#ifndef TB_MSGS_MESSAGE_SRV_VO_RESETREQUEST_H
#define TB_MSGS_MESSAGE_SRV_VO_RESETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb_msgs
{
template <class ContainerAllocator>
struct srv_vo_resetRequest_
{
  typedef srv_vo_resetRequest_<ContainerAllocator> Type;

  srv_vo_resetRequest_()
    : request_enable(false)  {
    }
  srv_vo_resetRequest_(const ContainerAllocator& _alloc)
    : request_enable(false)  {
  (void)_alloc;
    }



   typedef uint8_t _request_enable_type;
  _request_enable_type request_enable;





  typedef boost::shared_ptr< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srv_vo_resetRequest_

typedef ::tb_msgs::srv_vo_resetRequest_<std::allocator<void> > srv_vo_resetRequest;

typedef boost::shared_ptr< ::tb_msgs::srv_vo_resetRequest > srv_vo_resetRequestPtr;
typedef boost::shared_ptr< ::tb_msgs::srv_vo_resetRequest const> srv_vo_resetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request_enable == rhs.request_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator1> & lhs, const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80fabffbd65ba8678a8fe43340439c5b";
  }

  static const char* value(const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80fabffbd65ba867ULL;
  static const uint64_t static_value2 = 0x8a8fe43340439c5bULL;
};

template<class ContainerAllocator>
struct DataType< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb_msgs/srv_vo_resetRequest";
  }

  static const char* value(const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool request_enable\n"
;
  }

  static const char* value(const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv_vo_resetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb_msgs::srv_vo_resetRequest_<ContainerAllocator>& v)
  {
    s << indent << "request_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB_MSGS_MESSAGE_SRV_VO_RESETREQUEST_H
