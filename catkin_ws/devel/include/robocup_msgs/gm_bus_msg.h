// Generated by gencpp from file robocup_msgs/gm_bus_msg.msg
// DO NOT EDIT!


#ifndef ROBOCUP_MSGS_MESSAGE_GM_BUS_MSG_H
#define ROBOCUP_MSGS_MESSAGE_GM_BUS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robocup_msgs
{
template <class ContainerAllocator>
struct gm_bus_msg_
{
  typedef gm_bus_msg_<ContainerAllocator> Type;

  gm_bus_msg_()
    : action()
    , action_id()
    , payload()
    , result(0)  {
    }
  gm_bus_msg_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , action_id(_alloc)
    , payload(_alloc)
    , result(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_id_type;
  _action_id_type action_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _payload_type;
  _payload_type payload;

   typedef int64_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> const> ConstPtr;

}; // struct gm_bus_msg_

typedef ::robocup_msgs::gm_bus_msg_<std::allocator<void> > gm_bus_msg;

typedef boost::shared_ptr< ::robocup_msgs::gm_bus_msg > gm_bus_msgPtr;
typedef boost::shared_ptr< ::robocup_msgs::gm_bus_msg const> gm_bus_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup_msgs::gm_bus_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robocup_msgs::gm_bus_msg_<ContainerAllocator1> & lhs, const ::robocup_msgs::gm_bus_msg_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.action_id == rhs.action_id &&
    lhs.payload == rhs.payload &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robocup_msgs::gm_bus_msg_<ContainerAllocator1> & lhs, const ::robocup_msgs::gm_bus_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robocup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62b58daf055e930a53310be196083a09";
  }

  static const char* value(const ::robocup_msgs::gm_bus_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62b58daf055e930aULL;
  static const uint64_t static_value2 = 0x53310be196083a09ULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup_msgs/gm_bus_msg";
  }

  static const char* value(const ::robocup_msgs::gm_bus_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string action_id\n"
"string payload\n"
"int64 result\n"
;
  }

  static const char* value(const ::robocup_msgs::gm_bus_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.action_id);
      stream.next(m.payload);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gm_bus_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup_msgs::gm_bus_msg_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "action_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_id);
    s << indent << "payload: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.payload);
    s << indent << "result: ";
    Printer<int64_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP_MSGS_MESSAGE_GM_BUS_MSG_H
