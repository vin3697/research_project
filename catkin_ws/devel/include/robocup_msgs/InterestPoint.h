// Generated by gencpp from file robocup_msgs/InterestPoint.msg
// DO NOT EDIT!


#ifndef ROBOCUP_MSGS_MESSAGE_INTERESTPOINT_H
#define ROBOCUP_MSGS_MESSAGE_INTERESTPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace robocup_msgs
{
template <class ContainerAllocator>
struct InterestPoint_
{
  typedef InterestPoint_<ContainerAllocator> Type;

  InterestPoint_()
    : label()
    , pose()
    , arm_position(0)
    , head_pitch(0.0)
    , head_yaw(0.0)  {
    }
  InterestPoint_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , pose(_alloc)
    , arm_position(0)
    , head_pitch(0.0)
    , head_yaw(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef int32_t _arm_position_type;
  _arm_position_type arm_position;

   typedef float _head_pitch_type;
  _head_pitch_type head_pitch;

   typedef float _head_yaw_type;
  _head_yaw_type head_yaw;





  typedef boost::shared_ptr< ::robocup_msgs::InterestPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup_msgs::InterestPoint_<ContainerAllocator> const> ConstPtr;

}; // struct InterestPoint_

typedef ::robocup_msgs::InterestPoint_<std::allocator<void> > InterestPoint;

typedef boost::shared_ptr< ::robocup_msgs::InterestPoint > InterestPointPtr;
typedef boost::shared_ptr< ::robocup_msgs::InterestPoint const> InterestPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup_msgs::InterestPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup_msgs::InterestPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robocup_msgs::InterestPoint_<ContainerAllocator1> & lhs, const ::robocup_msgs::InterestPoint_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.pose == rhs.pose &&
    lhs.arm_position == rhs.arm_position &&
    lhs.head_pitch == rhs.head_pitch &&
    lhs.head_yaw == rhs.head_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robocup_msgs::InterestPoint_<ContainerAllocator1> & lhs, const ::robocup_msgs::InterestPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robocup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::InterestPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::InterestPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::InterestPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3020caa940dc334ac8a1711cecc9ac49";
  }

  static const char* value(const ::robocup_msgs::InterestPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3020caa940dc334aULL;
  static const uint64_t static_value2 = 0xc8a1711cecc9ac49ULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup_msgs/InterestPoint";
  }

  static const char* value(const ::robocup_msgs::InterestPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"geometry_msgs/Pose pose\n"
"int32 arm_position\n"
"float32 head_pitch\n"
"float32 head_yaw\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robocup_msgs::InterestPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.pose);
      stream.next(m.arm_position);
      stream.next(m.head_pitch);
      stream.next(m.head_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterestPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup_msgs::InterestPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup_msgs::InterestPoint_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "arm_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arm_position);
    s << indent << "head_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.head_pitch);
    s << indent << "head_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.head_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP_MSGS_MESSAGE_INTERESTPOINT_H
