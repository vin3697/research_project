// Generated by gencpp from file robocup_msgs/OAction.msg
// DO NOT EDIT!


#ifndef ROBOCUP_MSGS_MESSAGE_OACTION_H
#define ROBOCUP_MSGS_MESSAGE_OACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robocup_msgs/gm_bus_msg.h>

namespace robocup_msgs
{
template <class ContainerAllocator>
struct OAction_
{
  typedef OAction_<ContainerAllocator> Type;

  OAction_()
    : action()
    , seq(0)  {
    }
  OAction_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , seq(0)  {
  (void)_alloc;
    }



   typedef  ::robocup_msgs::gm_bus_msg_<ContainerAllocator>  _action_type;
  _action_type action;

   typedef int32_t _seq_type;
  _seq_type seq;





  typedef boost::shared_ptr< ::robocup_msgs::OAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup_msgs::OAction_<ContainerAllocator> const> ConstPtr;

}; // struct OAction_

typedef ::robocup_msgs::OAction_<std::allocator<void> > OAction;

typedef boost::shared_ptr< ::robocup_msgs::OAction > OActionPtr;
typedef boost::shared_ptr< ::robocup_msgs::OAction const> OActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup_msgs::OAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup_msgs::OAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robocup_msgs::OAction_<ContainerAllocator1> & lhs, const ::robocup_msgs::OAction_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.seq == rhs.seq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robocup_msgs::OAction_<ContainerAllocator1> & lhs, const ::robocup_msgs::OAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robocup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::OAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::OAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::OAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::OAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::OAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::OAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup_msgs::OAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "818834c67594e9ad725e9c69dd8d50a9";
  }

  static const char* value(const ::robocup_msgs::OAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x818834c67594e9adULL;
  static const uint64_t static_value2 = 0x725e9c69dd8d50a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup_msgs::OAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup_msgs/OAction";
  }

  static const char* value(const ::robocup_msgs::OAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup_msgs::OAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gm_bus_msg action\n"
"int32 seq\n"
"================================================================================\n"
"MSG: robocup_msgs/gm_bus_msg\n"
"string action\n"
"string action_id\n"
"string payload\n"
"int64 result\n"
;
  }

  static const char* value(const ::robocup_msgs::OAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup_msgs::OAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.seq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup_msgs::OAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup_msgs::OAction_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    s << std::endl;
    Printer< ::robocup_msgs::gm_bus_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.action);
    s << indent << "seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP_MSGS_MESSAGE_OACTION_H
