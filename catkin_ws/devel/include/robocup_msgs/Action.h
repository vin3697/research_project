// Generated by gencpp from file robocup_msgs/Action.msg
// DO NOT EDIT!


#ifndef ROBOCUP_MSGS_MESSAGE_ACTION_H
#define ROBOCUP_MSGS_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robocup_msgs
{
template <class ContainerAllocator>
struct Action_
{
  typedef Action_<ContainerAllocator> Type;

  Action_()
    : expectedDuration(0)
    , actionType()
    , status()
    , id(0)  {
    }
  Action_(const ContainerAllocator& _alloc)
    : expectedDuration(0)
    , actionType(_alloc)
    , status(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef int64_t _expectedDuration_type;
  _expectedDuration_type expectedDuration;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _actionType_type;
  _actionType_type actionType;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef int64_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::robocup_msgs::Action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup_msgs::Action_<ContainerAllocator> const> ConstPtr;

}; // struct Action_

typedef ::robocup_msgs::Action_<std::allocator<void> > Action;

typedef boost::shared_ptr< ::robocup_msgs::Action > ActionPtr;
typedef boost::shared_ptr< ::robocup_msgs::Action const> ActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup_msgs::Action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup_msgs::Action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robocup_msgs::Action_<ContainerAllocator1> & lhs, const ::robocup_msgs::Action_<ContainerAllocator2> & rhs)
{
  return lhs.expectedDuration == rhs.expectedDuration &&
    lhs.actionType == rhs.actionType &&
    lhs.status == rhs.status &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robocup_msgs::Action_<ContainerAllocator1> & lhs, const ::robocup_msgs::Action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robocup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::Action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::Action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::Action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::Action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup_msgs::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "babad16480d2be3a1c7e57b34a83f0f2";
  }

  static const char* value(const ::robocup_msgs::Action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbabad16480d2be3aULL;
  static const uint64_t static_value2 = 0x1c7e57b34a83f0f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup_msgs::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup_msgs/Action";
  }

  static const char* value(const ::robocup_msgs::Action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup_msgs::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 expectedDuration\n"
"string actionType\n"
"string status\n"
"int64 id\n"
;
  }

  static const char* value(const ::robocup_msgs::Action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup_msgs::Action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.expectedDuration);
      stream.next(m.actionType);
      stream.next(m.status);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup_msgs::Action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup_msgs::Action_<ContainerAllocator>& v)
  {
    s << indent << "expectedDuration: ";
    Printer<int64_t>::stream(s, indent + "  ", v.expectedDuration);
    s << indent << "actionType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.actionType);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP_MSGS_MESSAGE_ACTION_H
