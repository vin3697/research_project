// Generated by gencpp from file robocup_msgs/NavigationAction.msg
// DO NOT EDIT!


#ifndef ROBOCUP_MSGS_MESSAGE_NAVIGATIONACTION_H
#define ROBOCUP_MSGS_MESSAGE_NAVIGATIONACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robocup_msgs/Action.h>
#include <geometry_msgs/Pose.h>

namespace robocup_msgs
{
template <class ContainerAllocator>
struct NavigationAction_
{
  typedef NavigationAction_<ContainerAllocator> Type;

  NavigationAction_()
    : action_base()
    , orientation()
    , destinationKey()
    , coord()
    , waitTime(0)  {
    }
  NavigationAction_(const ContainerAllocator& _alloc)
    : action_base(_alloc)
    , orientation(_alloc)
    , destinationKey(_alloc)
    , coord(_alloc)
    , waitTime(0)  {
  (void)_alloc;
    }



   typedef  ::robocup_msgs::Action_<ContainerAllocator>  _action_base_type;
  _action_base_type action_base;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _orientation_type;
  _orientation_type orientation;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destinationKey_type;
  _destinationKey_type destinationKey;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _coord_type;
  _coord_type coord;

   typedef int64_t _waitTime_type;
  _waitTime_type waitTime;





  typedef boost::shared_ptr< ::robocup_msgs::NavigationAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup_msgs::NavigationAction_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationAction_

typedef ::robocup_msgs::NavigationAction_<std::allocator<void> > NavigationAction;

typedef boost::shared_ptr< ::robocup_msgs::NavigationAction > NavigationActionPtr;
typedef boost::shared_ptr< ::robocup_msgs::NavigationAction const> NavigationActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup_msgs::NavigationAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup_msgs::NavigationAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robocup_msgs::NavigationAction_<ContainerAllocator1> & lhs, const ::robocup_msgs::NavigationAction_<ContainerAllocator2> & rhs)
{
  return lhs.action_base == rhs.action_base &&
    lhs.orientation == rhs.orientation &&
    lhs.destinationKey == rhs.destinationKey &&
    lhs.coord == rhs.coord &&
    lhs.waitTime == rhs.waitTime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robocup_msgs::NavigationAction_<ContainerAllocator1> & lhs, const ::robocup_msgs::NavigationAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robocup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_msgs::NavigationAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_msgs::NavigationAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_msgs::NavigationAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25cf7e64f157b8110b004ebe02d7640e";
  }

  static const char* value(const ::robocup_msgs::NavigationAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25cf7e64f157b811ULL;
  static const uint64_t static_value2 = 0x0b004ebe02d7640eULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup_msgs/NavigationAction";
  }

  static const char* value(const ::robocup_msgs::NavigationAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Action action_base\n"
"string orientation\n"
"string destinationKey\n"
"geometry_msgs/Pose coord\n"
"int64 waitTime\n"
"================================================================================\n"
"MSG: robocup_msgs/Action\n"
"int64 expectedDuration\n"
"string actionType\n"
"string status\n"
"int64 id\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robocup_msgs::NavigationAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_base);
      stream.next(m.orientation);
      stream.next(m.destinationKey);
      stream.next(m.coord);
      stream.next(m.waitTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup_msgs::NavigationAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup_msgs::NavigationAction_<ContainerAllocator>& v)
  {
    s << indent << "action_base: ";
    s << std::endl;
    Printer< ::robocup_msgs::Action_<ContainerAllocator> >::stream(s, indent + "  ", v.action_base);
    s << indent << "orientation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.orientation);
    s << indent << "destinationKey: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destinationKey);
    s << indent << "coord: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.coord);
    s << indent << "waitTime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.waitTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP_MSGS_MESSAGE_NAVIGATIONACTION_H
